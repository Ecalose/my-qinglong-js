# -*- coding: utf-8 -*-
#!/usr/bin/env python3
"""
* 仅供学习交流，请在下载后的24小时内完全删除 请勿将任何内容用于商业或非法目的，否则后果自负。
* 幻生魔改自用版 V1.32

* 活动入口,微信打开：
* 如果连接过期了运行一下就出来了最新的入口！
* https://u7ds.sy673.shop/yunonline/v1/auth/2639bb95daba1d99e5338a8c2e21e2f0?codeurl=u7ds.sy673.shop&codeuserid=2&time=1709021176
* 打开活动入口，抓包的任意接口cookies中的ysm_uid参数
* 
* 变量格式：
* 新建同名环境变量
* 变量名：xyyyd
* 变量值：
* # 3000 代表 3毛，后面两个推送参数可不填，那就必须配置全局推送！
* 账号备注#ysm_uid参数#unionId#提现金额如3000#wxpushApptoken#wxpushTopicId
* 
* 其他参数说明（脚本最下方填写参数）
* wxpusher全局参数：wxpusherAppToken、wxpusherTopicId
* 具体使用方法请看文档地址：https://wxpusher.zjiecode.com/docs/#/
* 
* 也可使用 微信机器人：wechatBussinessKey
* 
* 支持支付宝提现：账号备注#ysm_uid参数#unionId#提现金额如3000#wxpushApptoken#wxpushTopicId#支付宝姓名#支付宝账号
* 只想提现支付宝，不想填写其他参数，最少的参数就是：账号备注#ysm_uid参数#unionId####支付宝姓名#支付宝账号
*
* 定时运行每半小时一次
* 达到标准自动提现
* 达到标准，自动提现
"""
# This file requires Python 3.x and the following dependencies:
# - base64
try:
    import base64
    exec(base64.b64decode('IiIgICMgbGluZToyNjoiIiIKaW1wb3J0IGhhc2hsaWIgICMgbGluZToyODppbXBvcnQgaGFzaGxpYgppbXBvcnQganNvbiAgIyBsaW5lOjI5OmltcG9ydCBqc29uCmltcG9ydCBtYXRoICAjIGxpbmU6MzA6aW1wb3J0IG1hdGgKaW1wb3J0IG9zICAjIGxpbmU6MzE6aW1wb3J0IG9zCmltcG9ydCB0aW1lICAjIGxpbmU6MzI6aW1wb3J0IHRpbWUKaW1wb3J0IHJlcXVlc3RzICAjIGxpbmU6MzM6aW1wb3J0IHJlcXVlc3RzCmltcG9ydCByYW5kb20gICMgbGluZTozNDppbXBvcnQgcmFuZG9tCmltcG9ydCByZSAgIyBsaW5lOjM1OmltcG9ydCByZQpmcm9tIHVybGxpYi5wYXJzZSBpbXBvcnQgKAogICAgcXVvdGUsCiAgICB1cmxwYXJzZSwKICAgIHBhcnNlX3FzLAopICAjIGxpbmU6MzY6ZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHF1b3RlLCB1cmxwYXJzZSwgcGFyc2VfcXMKaW1wb3J0IHVybGxpYjMgICMgbGluZTozNzppbXBvcnQgdXJsbGliMwpmcm9tIHVybGxpYi5wYXJzZSBpbXBvcnQgKAogICAgcGFyc2VfcXMsCiAgICB1cmxzcGxpdCwKKSAgIyBsaW5lOjM4OmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCBwYXJzZV9xcywgdXJsc3BsaXQKCnVybGxpYjMuZGlzYWJsZV93YXJuaW5ncygpICAjIGxpbmU6NDA6dXJsbGliMy5kaXNhYmxlX3dhcm5pbmdzKCkKd3hwdXNoZXJBcHBUb2tlbiA9ICgKICAgIG9zLmdldGVudigid3hwdXNoZXJBcHBUb2tlbiIpIG9yICIiCikgICMgbGluZTo0Mzp3eHB1c2hlckFwcFRva2VuID0gb3MuZ2V0ZW52KCJ3eHB1c2hlckFwcFRva2VuIikgb3IgIiIKd3hwdXNoZXJUb3BpY0lkID0gKAogICAgb3MuZ2V0ZW52KCJ3eHB1c2hlclRvcGljSWQiKSBvciAiIgopICAjIGxpbmU6NDQ6d3hwdXNoZXJUb3BpY0lkID0gb3MuZ2V0ZW52KCJ3eHB1c2hlclRvcGljSWQiKSBvciAiIgp3ZWNoYXRCdXNzaW5lc3NLZXkgPSAoCiAgICBvcy5nZXRlbnYoIndlY2hhdEJ1c3NpbmVzc0tleSIpIG9yICIiCikgICMgbGluZTo0NTp3ZWNoYXRCdXNzaW5lc3NLZXkgPSBvcy5nZXRlbnYoIndlY2hhdEJ1c3NpbmVzc0tleSIpIG9yICIiCgoKZGVmIHB1c2goCiAgICBPMDAwMDAwMDBPMDBPME9PTywKICAgIE9PME8wT08wTzBPTzBPME8wLAogICAgTzBPME8wME9PT08wME8wT08sCiAgICBPME9PT08wMDBPMDAwMDAwTywKICAgIE9PME8wMDBPME9PME8wMDAwLAogICAgT09PMDBPT09PME9PME9PME8sCik6ICAjIGxpbmU6NDg6ZGVmIHB1c2goYXBwVG9rZW4sIHRvcGljSWRzLCB0aXRsZSwgbGluaywgdGV4dCwgdHlwZSk6CiAgICBPME8wTzAwTzAwME9PME9PMCA9IHsKICAgICAgICAiYXBwVG9rZW4iOiBPMDAwMDAwMDBPMDBPME9PTywKICAgICAgICAiY29udGVudCI6IGYiIiI8Ym9keSBvbmxvYWQ9IndpbmRvdy5sb2NhdGlvbi5ocmVmPSd7TzBPT09PMDAwTzAwMDAwME99JyI+5Ye6546w5qOA5rWL5paH56ug77yB77yB77yBXG48YSBzdHlsZT0ncGFkZGluZzoxMHB4O2NvbG9yOnJlZDtmb250LXNpemU6MjBweDsnIGhyZWY9J3tsaW5rfSc+54K55Ye75oiR5omT5byA5b6F5qOA5rWL5paH56ugPC9hPlxu6K+35bC95b+r54K55Ye76ZO+5o6l5a6M5oiQ6ZiF6K+7XG7lpIfms6jvvJp7T08wTzAwME8wT08wTzAwMDB9PC9ib2R5PiIiIiwKICAgICAgICAic3VtbWFyeSI6IE8wTzBPMDBPT09PMDBPME9PIG9yICLlsI/pmIXpmIXpmIXor7siLAogICAgICAgICJjb250ZW50VHlwZSI6IDIsCiAgICAgICAgInRvcGljSWRzIjogW09PME8wT08wTzBPTzBPME8wIG9yICIxMTY4NiJdLAogICAgICAgICJ1cmwiOiBPME9PT08wMDBPMDAwMDAwTywKICAgIH0gICMgbGluZTo1Njp9CiAgICBPTzAwT08wTzBPMDAwTzAwTyA9ICJodHRwOi8vd3hwdXNoZXIuemppZWNvZGUuY29tL2FwaS9zZW5kL21lc3NhZ2UiICAjIGxpbmU6NTg6dXJscHVzdCA9ICJodHRwOi8vd3hwdXNoZXIuemppZWNvZGUuY29tL2FwaS9zZW5kL21lc3NhZ2UiCiAgICB0cnk6ICAjIGxpbmU6NTk6dHJ5OgogICAgICAgIE9PTzBPMDBPMDAwTzAwTzBPID0gcmVxdWVzdHMucG9zdCgKICAgICAgICAgICAgdXJsPU9PMDBPTzBPME8wMDBPMDBPLCBqc29uPU8wTzBPMDBPMDAwT08wT08wLCB2ZXJpZnk9RmFsc2UKICAgICAgICApICAjIGxpbmU6NjA6cCA9IHJlcXVlc3RzLnBvc3QodXJsPXVybHB1c3QsIGpzb249ZGF0YXB1c3QsIHZlcmlmeT1GYWxzZSkKICAgICAgICBpZiAoCiAgICAgICAgICAgIE9PTzBPMDBPMDAwTzAwTzBPLmpzb24oKVsiY29kZSJdID09IDEwMDAKICAgICAgICApOiAgIyBsaW5lOjYyOmlmIHAuanNvbigpWyJjb2RlIl0gPT0gMTAwMDoKICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAi4pyFIOaOqOmAgeaWh+eroOWIsOW+ruS/oeaIkOWKn++8jOivt+WwveW/q+WJjeW+gOeCueWHu+aWh+eroO+8jOS4jeeEtuWwsem7keWPt+WVpu+8gSIKICAgICAgICAgICAgKSAgIyBsaW5lOjYzOnByaW50KCLinIUg5o6o6YCB5paH56ug5Yiw5b6u5L+h5oiQ5Yqf77yM6K+35bC95b+r5YmN5b6A54K55Ye75paH56ug77yM5LiN54S25bCx6buR5Y+35ZWm77yBIikKICAgICAgICAgICAgcmV0dXJuIFRydWUgICMgbGluZTo2NDpyZXR1cm4gVHJ1ZQogICAgICAgIGVsc2U6ICAjIGxpbmU6NjU6ZWxzZToKICAgICAgICAgICAgcHJpbnQoIuKdjCDmjqjpgIHmlofnq6DliLDlvq7kv6HlpLHotKXvvIzlrozniorlrZDvvIzopoHpu5Hlj7fkuobvvIEiKSAgIyBsaW5lOjY2OnByaW50KCLinYwg5o6o6YCB5paH56ug5Yiw5b6u5L+h5aSx6LSl77yM5a6M54qK5a2Q77yM6KaB6buR5Y+35LqG77yBIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlICAjIGxpbmU6Njc6cmV0dXJuIEZhbHNlCiAgICBleGNlcHQ6ICAjIGxpbmU6Njg6ZXhjZXB0OgogICAgICAgIHByaW50KCLinYwg5o6o6YCB5paH56ug5Yiw5b6u5L+h5aSx6LSl77yM5a6M54qK5a2Q77yM6KaB6buR5Y+35LqG77yBIikgICMgbGluZTo2OTpwcmludCgi4p2MIOaOqOmAgeaWh+eroOWIsOW+ruS/oeWksei0pe+8jOWujOeKiuWtkO+8jOimgem7keWPt+S6hu+8gSIpCiAgICAgICAgcmV0dXJuIEZhbHNlICAjIGxpbmU6NzA6cmV0dXJuIEZhbHNlCgoKZGVmIHB1c2hXZWNoYXRCdXNzaW5lc3MoCiAgICBPMDBPMDBPT09PT09PT08wMCwgT08wTzAwT09PTzAwTzBPTzAKKTogICMgbGluZTo3MzpkZWYgcHVzaFdlY2hhdEJ1c3NpbmVzcyhyb2JvdEtleSwgbGluayk6CiAgICBPMDAwTzBPT09PMDBPT09PMCA9IHsKICAgICAgICAibXNndHlwZSI6ICJ0ZXh0IiwKICAgICAgICAidGV4dCI6IHsiY29udGVudCI6IE9PME8wME9PT08wME8wT08wfSwKICAgIH0gICMgbGluZTo3NDpkYXRhcHVzdCA9IHsibXNndHlwZSI6ICJ0ZXh0IiwgInRleHQiOiB7ImNvbnRlbnQiOiBsaW5rfX0KICAgIE9PTzBPT09PMDAwME9PT09PID0gKAogICAgICAgICJodHRwczovL3F5YXBpLndlaXhpbi5xcS5jb20vY2dpLWJpbi93ZWJob29rL3NlbmQ/a2V5PSIgKyBPMDBPMDBPT09PT09PT08wMAogICAgKSAgIyBsaW5lOjc2OnVybHB1c3QgPSAiaHR0cHM6Ly9xeWFwaS53ZWl4aW4ucXEuY29tL2NnaS1iaW4vd2ViaG9vay9zZW5kP2tleT0iICsgcm9ib3RLZXkKICAgIHRyeTogICMgbGluZTo3Nzp0cnk6CiAgICAgICAgT09PME8wTzAwT08wT09PTzAgPSByZXF1ZXN0cy5wb3N0KAogICAgICAgICAgICB1cmw9T09PME9PT08wMDAwT09PT08sIGpzb249TzAwME8wT09PTzAwT09PTzAsIHZlcmlmeT1GYWxzZQogICAgICAgICkgICMgbGluZTo3ODpwID0gcmVxdWVzdHMucG9zdCh1cmw9dXJscHVzdCwganNvbj1kYXRhcHVzdCwgdmVyaWZ5PUZhbHNlKQogICAgICAgIGlmICgKICAgICAgICAgICAgT09PME8wTzAwT08wT09PTzAuanNvbigpWyJlcnJjb2RlIl0gPT0gMAogICAgICAgICk6ICAjIGxpbmU6ODA6aWYgcC5qc29uKClbImVycmNvZGUiXSA9PSAwOgogICAgICAgICAgICBwcmludCgi4pyFIOaOqOmAgeaWh+eroOWIsOS8geS4muW+ruS/oeaIkOWKn++8gSIpICAjIGxpbmU6ODE6cHJpbnQoIuKchSDmjqjpgIHmlofnq6DliLDkvIHkuJrlvq7kv6HmiJDlip/vvIEiKQogICAgICAgICAgICByZXR1cm4gVHJ1ZSAgIyBsaW5lOjgyOnJldHVybiBUcnVlCiAgICAgICAgZWxzZTogICMgbGluZTo4MzplbHNlOgogICAgICAgICAgICBwcmludCgi4p2MIOaOqOmAgeaWh+eroOWIsOS8geS4muW+ruS/oeWksei0pe+8gSIpICAjIGxpbmU6ODQ6cHJpbnQoIuKdjCDmjqjpgIHmlofnq6DliLDkvIHkuJrlvq7kv6HlpLHotKXvvIEiKQogICAgICAgICAgICByZXR1cm4gRmFsc2UgICMgbGluZTo4NTpyZXR1cm4gRmFsc2UKICAgIGV4Y2VwdDogICMgbGluZTo4NjpleGNlcHQ6CiAgICAgICAgcHJpbnQoIuKdjCDmjqjpgIHmlofnq6DliLDkvIHkuJrlvq7kv6HlpLHotKXvvIEiKSAgIyBsaW5lOjg3OnByaW50KCLinYwg5o6o6YCB5paH56ug5Yiw5LyB5Lia5b6u5L+h5aSx6LSl77yBIikKICAgICAgICByZXR1cm4gRmFsc2UgICMgbGluZTo4ODpyZXR1cm4gRmFsc2UKCgpkZWYgZ2V0aW5mbyhPME8wMDAwME8wTzBPT08wMCk6ICAjIGxpbmU6OTE6ZGVmIGdldGluZm8obGluayk6CiAgICB0cnk6ICAjIGxpbmU6OTI6dHJ5OgogICAgICAgIE9PTzAwME8wTzBPMDBPT09PID0gcmVxdWVzdHMuZ2V0KAogICAgICAgICAgICBPME8wMDAwME8wTzBPT08wMCwgdmVyaWZ5PUZhbHNlCiAgICAgICAgKSAgIyBsaW5lOjkzOnIgPSByZXF1ZXN0cy5nZXQobGluaywgdmVyaWZ5PUZhbHNlKQogICAgICAgIE9PT09PMDAwTzAwT09PT09PID0gcmUuc3ViKAogICAgICAgICAgICAiXHMiLCAiIiwgT09PMDAwTzBPME8wME9PT08udGV4dAogICAgICAgICkgICMgbGluZTo5NTpodG1sID0gcmUuc3ViKCJccyIsICIiLCByLnRleHQpCiAgICAgICAgTzAwMDBPMDBPME9PTzBPTzAgPSByZS5maW5kYWxsKAogICAgICAgICAgICAndmFyYml6PSIoLio/KSJcfFx8JywgT09PT08wMDBPMDBPT09PT08KICAgICAgICApICAjIGxpbmU6OTY6Yml6ID0gcmUuZmluZGFsbCgndmFyYml6PSIoLio/KSJcfFx8JywgaHRtbCkKICAgICAgICBpZiBPMDAwME8wME8wT09PME9PMCAhPSBbXTogICMgbGluZTo5NzppZiBiaXogIT0gW106CiAgICAgICAgICAgIE8wMDAwTzAwTzBPT08wT08wID0gTzAwMDBPMDBPME9PTzBPTzBbMF0gICMgbGluZTo5ODpiaXogPSBiaXpbMF0KICAgICAgICBpZiAoCiAgICAgICAgICAgIE8wMDAwTzAwTzBPT08wT08wID09ICIiIG9yIE8wMDAwTzAwTzBPT08wT08wID09IFtdCiAgICAgICAgKTogICMgbGluZTo5OTppZiBiaXogPT0gIiIgb3IgYml6ID09IFtdOgogICAgICAgICAgICBpZiAiX19iaXoiIGluIE8wTzAwMDAwTzBPME9PTzAwOiAgIyBsaW5lOjEwMDppZiAiX19iaXoiIGluIGxpbms6CiAgICAgICAgICAgICAgICBPMDAwME8wME8wT09PME9PMCA9IHJlLmZpbmRhbGwoCiAgICAgICAgICAgICAgICAgICAgIl9fYml6PSguKj8pJiIsIE8wTzAwMDAwTzBPME9PTzAwCiAgICAgICAgICAgICAgICApICAjIGxpbmU6MTAxOmJpeiA9IHJlLmZpbmRhbGwoIl9fYml6PSguKj8pJiIsIGxpbmspCiAgICAgICAgICAgICAgICBpZiBPMDAwME8wME8wT09PME9PMCAhPSBbXTogICMgbGluZToxMDI6aWYgYml6ICE9IFtdOgogICAgICAgICAgICAgICAgICAgIE8wMDAwTzAwTzBPT08wT08wID0gTzAwMDBPMDBPME9PTzBPTzBbMF0gICMgbGluZToxMDM6Yml6ID0gYml6WzBdCiAgICAgICAgTzAwMDAwME9PTzBPMDAwME8gPSByZS5maW5kYWxsKAogICAgICAgICAgICAndmFybmlja25hbWU9aHRtbERlY29kZVwoIiguKj8pIlwpOycsIE9PT09PMDAwTzAwT09PT09PCiAgICAgICAgKSAgIyBsaW5lOjEwNDpuaWNrbmFtZSA9IHJlLmZpbmRhbGwoJ3Zhcm5pY2tuYW1lPWh0bWxEZWNvZGVcKCIoLio/KSJcKTsnLCBodG1sKQogICAgICAgIGlmIE8wMDAwMDBPT08wTzAwMDBPICE9IFtdOiAgIyBsaW5lOjEwNTppZiBuaWNrbmFtZSAhPSBbXToKICAgICAgICAgICAgTzAwMDAwME9PTzBPMDAwME8gPSBPMDAwMDAwT09PME8wMDAwT1swXSAgIyBsaW5lOjEwNjpuaWNrbmFtZSA9IG5pY2tuYW1lWzBdCiAgICAgICAgTzAwT08wME9PMDBPME9PME8gPSByZS5maW5kYWxsKAogICAgICAgICAgICAndmFydXNlcl9uYW1lPSIoLio/KSI7JywgT09PT08wMDBPMDBPT09PT08KICAgICAgICApICAjIGxpbmU6MTA3OnVzZXJfbmFtZSA9IHJlLmZpbmRhbGwoJ3ZhcnVzZXJfbmFtZT0iKC4qPykiOycsIGh0bWwpCiAgICAgICAgaWYgTzAwT08wME9PMDBPME9PME8gIT0gW106ICAjIGxpbmU6MTA4OmlmIHVzZXJfbmFtZSAhPSBbXToKICAgICAgICAgICAgTzAwT08wME9PMDBPME9PME8gPSBPMDBPTzAwT08wME8wT08wT1sKICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgXSAgIyBsaW5lOjEwOTp1c2VyX25hbWUgPSB1c2VyX25hbWVbMF0KICAgICAgICBPMDBPMDBPME8wME9PT09PTyA9IHJlLmZpbmRhbGwoCiAgICAgICAgICAgICJ2YXJtc2dfdGl0bGU9JyguKj8pJ1wuaHRtbFwoIiwgT09PT08wMDBPMDBPT09PT08KICAgICAgICApICAjIGxpbmU6MTEwOm1zZ190aXRsZSA9IHJlLmZpbmRhbGwoInZhcm1zZ190aXRsZT0nKC4qPyknXC5odG1sXCgiLCBodG1sKQogICAgICAgIGlmIE8wME8wME8wTzAwT09PT09PICE9IFtdOiAgIyBsaW5lOjExMTppZiBtc2dfdGl0bGUgIT0gW106CiAgICAgICAgICAgIE8wME8wME8wTzAwT09PT09PID0gTzAwTzAwTzBPMDBPT09PT09bCiAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgIF0gICMgbGluZToxMTI6bXNnX3RpdGxlID0gbXNnX3RpdGxlWzBdCiAgICAgICAgT08wT08wTzBPME8wT09PME8gPSBmIuWFrOS8l+WPt+WUr+S4gOagh+ivhu+8mntPMDAwME8wME8wT09PME9PMH185paH56ugOntPMDBPMDBPME8wME9PT09PT3185L2c6ICFOntPMDAwMDAwT09PME8wMDAwT3186LSm5Y+3OntPMDBPTzAwT08wME8wT08wT30iICAjIGxpbmU6MTEzOnRleHQgPSBmIuWFrOS8l+WPt+WUr+S4gOagh+ivhu+8mntiaXp9fOaWh+eroDp7bXNnX3RpdGxlfXzkvZzogIU6e25pY2tuYW1lfXzotKblj7c6e3VzZXJfbmFtZX0iCiAgICAgICAgcHJpbnQoT08wT08wTzBPME8wT09PME8pICAjIGxpbmU6MTE0OnByaW50KHRleHQpCiAgICAgICAgcmV0dXJuICgKICAgICAgICAgICAgTzAwMDAwME9PTzBPMDAwME8sCiAgICAgICAgICAgIE8wME9PMDBPTzAwTzBPTzBPLAogICAgICAgICAgICBPMDBPMDBPME8wME9PT09PTywKICAgICAgICAgICAgT08wT08wTzBPME8wT09PME8sCiAgICAgICAgICAgIE8wMDAwTzAwTzBPT08wT08wLAogICAgICAgICkgICMgbGluZToxMTU6cmV0dXJuIG5pY2tuYW1lLCB1c2VyX25hbWUsIG1zZ190aXRsZSwgdGV4dCwgYml6CiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIE9PTzAwTzBPMDAwT08wMDBPOiAgIyBsaW5lOjExNjpleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcHJpbnQoIuKdjCDmj5Dlj5bmlofnq6Dkv6Hmga/lpLHotKUiKSAgIyBsaW5lOjExODpwcmludCgi4p2MIOaPkOWPluaWh+eroOS/oeaBr+Wksei0pSIpCiAgICAgICAgcmV0dXJuIEZhbHNlICAjIGxpbmU6MTE5OnJldHVybiBGYWxzZQoKCmRlZiB0cygpOiAgIyBsaW5lOjEyMjpkZWYgdHMoKToKICAgIHJldHVybiAoCiAgICAgICAgc3RyKGludCh0aW1lLnRpbWUoKSkpICsgIjAwMCIKICAgICkgICMgbGluZToxMjM6cmV0dXJuIHN0cihpbnQodGltZS50aW1lKCkpKSArICIwMDAiCgoKY2hlY2tEaWN0ID0gewogICAgIk16a3hOVEUzTXpRNE1RPT0iOiBbIummmeWnkOeIseaXheihjCIsICJnaF81NGE2NWRjNjAwMzkiXSwKICAgICJNemc1TWpNME1ERXdOdz09IjogWyLmiJHmnKzpnZ7lh6EiLCAiZ2hfNDZiMDc2OTAzNDczIl0sCiAgICAiTXpVek9EWTROekUyT1E9PSI6IFsi5aSa6IKJ6JGh6JCEMjAyMCIsICJnaF9iM2Q3OWNkMWUxYjUiXSwKICAgICJNemt5TWpFM016WXhNZz09IjogWyJZb3VoZnVsIiwgImdoX2IzZDc5Y2QxZTFiNSJdLAogICAgIk16a3hOak13TkRJek9BPT0iOiBbIuWwkeW5tOayoeacieS5jOaJmOmCpjMiLCAiZ2hfYjNkNzljZDFlMWI1Il0sCiAgICAiTXpnM056VXhNamM1TWc9PSI6IFsi5pif5pif6K+66KiAIiwgImdoX2IzZDc5Y2QxZTFiNSJdLAogICAgIk16ZzROVGN3T0RFMU5BPT0iOiBbIuaWkemprOi/mOayoeedoTEyMyIsICJnaF9iM2Q3OWNkMWUxYjUiXSwKICAgICJNemswT0RJeE9ERTRPUT09IjogWyLmjIHlrrblppnmi5vlrp3lhbgiLCAiZ2hfYjNkNzljZDFlMWI1Il0sCiAgICAiTXpnMk5qVXlNakkxTkE9PSI6IFsiTGlsaW5uZyIsICJnaF9iM2Q3OWNkMWUxYjUiXSwKICAgICJNekl6TURjek9EZzRNdz09IjogWyLmnInmlYXkuovnmoTlkIzlraZZIiwgImdoX2IzZDc5Y2QxZTFiNSJdLAogICAgIk16ZzVPRFV5TXpZek1RPT0iOiBbIjc4OeS5n+S4jeihjCIsICJnaF9iM2Q3OWNkMWUxYjUiXSwKICAgICJNelUwTnpJNU1qYzRPUT09IjogWyLnmq7om4vnmKbogonnjKoiLCAiZ2hfNThkN2VlNTkzYjg2Il0sCiAgICAiTXpnNU1EZ3hPREF6TWc9PSI6IFsi5YyX5YyX5bCP5Yqp5omLIiwgImdoXzU4ZDdlZTU5M2I4NiJdLAogICAgIk16SXpNRGN6T0RnNE13PT0iOiBbIuacieaVheS6i+eahOWQjOWtplkiLCAiZ2hfYjhiOTI5MzRkYTVmIl0sCiAgICAiTXpreE5EVTFOREV6Tnc9PSI6IFsi5bCP6ZiF6ZiF5pyN5YqhIiwgImdoX2U1MGNmZWZlZjllNSJdLAp9ICAjIGxpbmU6MTQyOn0KCgpjbGFzcyBISFlEOiAgIyBsaW5lOjE0NTpjbGFzcyBISFlEOgogICAgZGVmIF9faW5pdF9fKAogICAgICAgIE9PT08wME9PME9PME9PMDAwLCBPMDAwMDBPME9PTzAwT09PMAogICAgKTogICMgbGluZToxNDY6ZGVmIF9faW5pdF9fKHNlbGYsIGNnKToKICAgICAgICBPT09PMDBPTzBPTzBPTzAwMC51bmlvbklkID0gTzAwMDAwTzBPT08wME9PTzBbCiAgICAgICAgICAgICJ1bmlvbklkIgogICAgICAgIF0gICMgbGluZToxNDc6c2VsZi51bmlvbklkID0gY2dbInVuaW9uSWQiXQogICAgICAgIE9PT08wME9PME9PME9PMDAwLnlzbV91aWQgPSBPMDAwMDBPME9PTzAwT09PMFsKICAgICAgICAgICAgInlzbV91aWQiCiAgICAgICAgXSAgIyBsaW5lOjE0ODpzZWxmLnlzbV91aWQgPSBjZ1sieXNtX3VpZCJdCiAgICAgICAgT09PTzAwT08wT08wT08wMDAudHhieiA9IE8wMDAwME8wT09PMDBPT08wWwogICAgICAgICAgICAidHhieiIKICAgICAgICBdICAjIGxpbmU6MTUwOnNlbGYudHhieiA9IGNnWyJ0eGJ6Il0KICAgICAgICBPT09PMDBPTzBPTzBPTzAwMC50b3BpY0lkcyA9IE8wMDAwME8wT09PMDBPT08wWwogICAgICAgICAgICAidG9waWNJZHMiCiAgICAgICAgXSAgIyBsaW5lOjE1MTpzZWxmLnRvcGljSWRzID0gY2dbInRvcGljSWRzIl0KICAgICAgICBPT09PMDBPTzBPTzBPTzAwMC5hcHBUb2tlbiA9IE8wMDAwME8wT09PMDBPT08wWwogICAgICAgICAgICAiYXBwVG9rZW4iCiAgICAgICAgXSAgIyBsaW5lOjE1MjpzZWxmLmFwcFRva2VuID0gY2dbImFwcFRva2VuIl0KICAgICAgICBnbG9iYWwgd2VjaGF0QnVzc2luZXNzS2V5ICAjIGxpbmU6MTUzOmdsb2JhbCB3ZWNoYXRCdXNzaW5lc3NLZXkKICAgICAgICBPT09PMDBPTzBPTzBPTzAwMC53ZWNoYXRCdXNzaW5lc3NLZXkgPSAoCiAgICAgICAgICAgIHdlY2hhdEJ1c3NpbmVzc0tleSBvciAiIgogICAgICAgICkgICMgbGluZToxNTQ6c2VsZi53ZWNoYXRCdXNzaW5lc3NLZXkgPSB3ZWNoYXRCdXNzaW5lc3NLZXkgb3IgIiIKICAgICAgICBPT09PMDBPTzBPTzBPTzAwMC5hbGlBY2NvdW50ID0gKAogICAgICAgICAgICBPMDAwMDBPME9PTzAwT09PMFsiYWxpQWNjb3VudCJdIG9yICIiCiAgICAgICAgKSAgIyBsaW5lOjE1NTpzZWxmLmFsaUFjY291bnQgPSBjZ1siYWxpQWNjb3VudCJdIG9yICIiCiAgICAgICAgT09PTzAwT08wT08wT08wMDAuYWxpTmFtZSA9ICgKICAgICAgICAgICAgTzAwMDAwTzBPT08wME9PTzBbImFsaU5hbWUiXSBvciAiIgogICAgICAgICkgICMgbGluZToxNTY6c2VsZi5hbGlOYW1lID0gY2dbImFsaU5hbWUiXSBvciAiIgogICAgICAgIE9PT08wME9PME9PME9PMDAwLm5hbWUgPSBPMDAwMDBPME9PTzAwT09PMFsKICAgICAgICAgICAgIm5hbWUiCiAgICAgICAgXSAgIyBsaW5lOjE1NzpzZWxmLm5hbWUgPSBjZ1sibmFtZSJdCiAgICAgICAgT09PTzAwT08wT08wT08wMDAuZG9tbmFpbkhvc3QgPSAiMTY5ODg1NTEzOS5oeGlvbmcudG9wIiAgIyBsaW5lOjE1ODpzZWxmLmRvbW5haW5Ib3N0ID0gIjE2OTg4NTUxMzkuaHhpb25nLnRvcCIKICAgICAgICBPT09PMDBPTzBPTzBPTzAwMC5leGNoYW5nZVBhcmFtcyA9ICIiICAjIGxpbmU6MTU5OnNlbGYuZXhjaGFuZ2VQYXJhbXMgPSAiIgogICAgICAgIE9PT08wME9PME9PME9PMDAwLmhlYWRlcnMgPSB7CiAgICAgICAgICAgICJDb25uZWN0aW9uIjogImtlZXAtYWxpdmUiLAogICAgICAgICAgICAiQWNjZXB0IjogImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdCwgKi8qOyBxPTAuMDEiLAogICAgICAgICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTA3LjAuMC4wIFNhZmFyaS81MzcuMzYgTmV0VHlwZS9XSUZJIE1pY3JvTWVzc2VuZ2VyLzcuMC4yMC4xNzgxKDB4NjcwMDE0M0IpIFdpbmRvd3NXZWNoYXQoMHg2MzA5MDYyMSkgWFdFQi84MzUxIEZsdWUiLAogICAgICAgICAgICAiWC1SZXF1ZXN0ZWQtV2l0aCI6ICJYTUxIdHRwUmVxdWVzdCIsCiAgICAgICAgICAgICJSZWZlcmVyIjogZiJodHRwOi8ve09PT08wME9PME9PME9PMDAwLmRvbW5haW5Ib3N0fS8iLAogICAgICAgICAgICAiT3JpZ2luIjogZiJodHRwOi8ve09PT08wME9PME9PME9PMDAwLmRvbW5haW5Ib3N0fSIsCiAgICAgICAgICAgICJBY2NlcHQtRW5jb2RpbmciOiAiZ3ppcCwgZGVmbGF0ZSIsCiAgICAgICAgICAgICJBY2NlcHQtTGFuZ3VhZ2UiOiAiemgtQ04semgiLAogICAgICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOCIsCiAgICAgICAgICAgICJDb29raWUiOiBmInlzbV91aWQ9e09PT08wME9PME9PME9PMDAwLnlzbV91aWR9OyIsCiAgICAgICAgfSAgIyBsaW5lOjE3Mjp9CiAgICAgICAgT09PTzAwT08wT08wT08wMDAuc2VjID0gKAogICAgICAgICAgICByZXF1ZXN0cy5zZXNzaW9uKCkKICAgICAgICApICAjIGxpbmU6MTczOnNlbGYuc2VjID0gcmVxdWVzdHMuc2Vzc2lvbigpCiAgICAgICAgT09PTzAwT08wT08wT08wMDAuc2VjLnZlcmlmeSA9IEZhbHNlICAjIGxpbmU6MTc0OnNlbGYuc2VjLnZlcmlmeSA9IEZhbHNlCiAgICAgICAgT09PTzAwT08wT08wT08wMDAuc2VjLmhlYWRlcnMgPSAoCiAgICAgICAgICAgIE9PT08wME9PME9PME9PMDAwLmhlYWRlcnMKICAgICAgICApICAjIGxpbmU6MTc1OnNlbGYuc2VjLmhlYWRlcnMgPSBzZWxmLmhlYWRlcnMKICAgICAgICBPT09PMDBPTzBPTzBPTzAwMC5sYXN0Yml6ID0gIiIgICMgbGluZToxNzY6c2VsZi5sYXN0Yml6ID0gIiIKCiAgICBkZWYgdXNlcl9pbmZvKE9PME9PMDBPT09PT08wME8wKTogICMgbGluZToxNzg6ZGVmIHVzZXJfaW5mbyhzZWxmKToKICAgICAgICBPT09PTzAwME9PT08wTzBPTyA9IGYiaHR0cDovL3tPTzBPTzAwT09PT09PMDBPMC5kb21uYWluSG9zdH0veXVub25saW5lL3YxL3NpZ25faW5mbz90aW1lPXt0cygpfSZ1bmlvbmlkPXtPTzBPTzAwT09PT09PMDBPMC51bmlvbklkfSIgICMgbGluZToxNzk6dSA9IGYiaHR0cDovL3tzZWxmLmRvbW5haW5Ib3N0fS95dW5vbmxpbmUvdjEvc2lnbl9pbmZvP3RpbWU9e3RzKCl9JnVuaW9uaWQ9e3NlbGYudW5pb25JZH0iCiAgICAgICAgTzBPT09PTzAwT09PMDAwT08gPSAiIiAgIyBsaW5lOjE4MDpyID0gIiIKICAgICAgICB0cnk6ICAjIGxpbmU6MTgxOnRyeToKICAgICAgICAgICAgTzBPT09PTzAwT09PMDAwT08gPSBPTzBPTzAwT09PT09PMDBPMC5zZWMuZ2V0KAogICAgICAgICAgICAgICAgT09PT08wMDBPT09PME8wT08KICAgICAgICAgICAgKSAgIyBsaW5lOjE4MjpyID0gc2VsZi5zZWMuZ2V0KHUpCiAgICAgICAgICAgIE9PT09PMDAwTzBPMDAwME8wID0gTzBPT09PTzAwT09PMDAwT08uanNvbigpICAjIGxpbmU6MTgzOnJqID0gci5qc29uKCkKICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgT09PT08wMDBPME8wMDAwTzAuZ2V0KCJlcnJjb2RlIikgPT0gMAogICAgICAgICAgICApOiAgIyBsaW5lOjE4NDppZiByai5nZXQoImVycmNvZGUiKSA9PSAwOgogICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgZiLotKblj7dbe09PME9PMDBPT09PT08wME8wLm5hbWV9XeiOt+WPluS/oeaBr+aIkOWKn++8jOW9k+WJjemYheivu+aWh+eroOavj+evh+WlluWKsSB7TzBPT09PTzAwT09PMDAwT08uanNvbigpWydkYXRhJ11bJ2F3YXJkJ1195Liq6YeR5biBIgogICAgICAgICAgICAgICAgKSAgIyBsaW5lOjE4NzopCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZSAgIyBsaW5lOjE4ODpyZXR1cm4gVHJ1ZQogICAgICAgICAgICBlbHNlOiAgIyBsaW5lOjE4OTplbHNlOgogICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgZiLotKblj7dbe09PME9PMDBPT09PT08wME8wLm5hbWV9XeiOt+WPlueUqOaIt+S/oeaBr+Wksei0pe+8jOi0puWPt+W8guW4uCDmiJbogIUgeXNtX3VpZOaXoOaViO+8jOivt+ajgOa1i3lzbV91aWTmmK/lkKbmraPnoa4iCiAgICAgICAgICAgICAgICApICAjIGxpbmU6MTkwOnByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeiOt+WPlueUqOaIt+S/oeaBr+Wksei0pe+8jOi0puWPt+W8guW4uCDmiJbogIUgeXNtX3VpZOaXoOaViO+8jOivt+ajgOa1i3lzbV91aWTmmK/lkKbmraPnoa4iKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlICAjIGxpbmU6MTkxOnJldHVybiBGYWxzZQogICAgICAgIGV4Y2VwdDogICMgbGluZToxOTI6ZXhjZXB0OgogICAgICAgICAgICBwcmludChPME9PT09PMDBPT08wMDBPTy50ZXh0KSAgIyBsaW5lOjE5MzpwcmludChyLnRleHQpCiAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgZiLotKblj7dbe09PME9PMDBPT09PT08wME8wLm5hbWV9XeiOt+WPlueUqOaIt+S/oeaBr+Wksei0pSx5c21fdWlk5peg5pWI77yM6K+35qOA5rWLeXNtX3VpZOaYr+WQpuato+ehriIKICAgICAgICAgICAgKSAgIyBsaW5lOjE5NDpwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV3ojrflj5bnlKjmiLfkv6Hmga/lpLHotKUseXNtX3VpZOaXoOaViO+8jOivt+ajgOa1i3lzbV91aWTmmK/lkKbmraPnoa4iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UgICMgbGluZToxOTU6cmV0dXJuIEZhbHNlCgogICAgZGVmIGhhc1dlY2hhdChPMDBPTzBPMDAwTzBPMDBPMCk6ICAjIGxpbmU6MTk3OmRlZiBoYXNXZWNoYXQoc2VsZik6CiAgICAgICAgTzAwT09PTzAwME9PMDAwTzAgPSAiIiAgIyBsaW5lOjE5ODpyID0gIiIKICAgICAgICB0cnk6ICAjIGxpbmU6MTk5OnRyeToKICAgICAgICAgICAgT08wT08wME9PT08wT08wTzAgPSBmImh0dHA6Ly97TzAwT08wTzAwME8wTzAwTzAuZG9tbmFpbkhvc3R9L3l1bm9ubGluZS92MS9oYXNXZWNoYXQ/dW5pb25pZD17TzAwT08wTzAwME8wTzAwTzAudW5pb25JZH0iICAjIGxpbmU6MjAwOnUgPSBmImh0dHA6Ly97c2VsZi5kb21uYWluSG9zdH0veXVub25saW5lL3YxL2hhc1dlY2hhdD91bmlvbmlkPXtzZWxmLnVuaW9uSWR9IgogICAgICAgICAgICBPMDBPT09PMDAwT08wMDBPMCA9IE8wME9PME8wMDBPME8wME8wLnNlYy5nZXQoCiAgICAgICAgICAgICAgICBPTzBPTzAwT09PTzBPTzBPMAogICAgICAgICAgICApICAjIGxpbmU6MjAxOnIgPSBzZWxmLnNlYy5nZXQodSkKICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICBmIui0puWPt1t7TzAwT08wTzAwME8wTzAwTzAubmFtZX1d5Yik5pat5YWs5LyX5Y+35Lu75Yqh5pWw6YeP77yae08wME9PT08wMDBPTzAwME8wLmpzb24oKVsnZGF0YSddWydoYXMnXX0iCiAgICAgICAgICAgICkgICMgbGluZToyMDI6cHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d5Yik5pat5YWs5LyX5Y+35Lu75Yqh5pWw6YeP77yae3IuanNvbigpWydkYXRhJ11bJ2hhcyddfSIpCiAgICAgICAgZXhjZXB0OiAgIyBsaW5lOjIwMzpleGNlcHQ6CiAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgZiLotKblj7dbe08wME9PME8wMDBPME8wME8wLm5hbWV9XeWIpOaWreaYr+WQpuacieWFrOS8l+WPt+S7u+WKoeWksei0pe+8mntPMDBPT09PMDAwT08wMDBPMC50ZXh0fSIKICAgICAgICAgICAgKSAgIyBsaW5lOjIwNDpwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV3liKTmlq3mmK/lkKbmnInlhazkvJflj7fku7vliqHlpLHotKXvvJp7ci50ZXh0fSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZSAgIyBsaW5lOjIwNTpyZXR1cm4gRmFsc2UKCiAgICBkZWYgZ29sZChPMDBPT09PMDAwT08wTzAwTyk6ICAjIGxpbmU6MjA3OmRlZiBnb2xkKHNlbGYpOgogICAgICAgIE8wT09PT08wMDAwTzAwME8wID0gIiIgICMgbGluZToyMDg6ciA9ICIiCiAgICAgICAgdHJ5OiAgIyBsaW5lOjIwOTp0cnk6CiAgICAgICAgICAgIE8wME8wTzAwME9PME8wMDAwID0gZiJodHRwOi8ve08wME9PT08wMDBPTzBPMDBPLmRvbW5haW5Ib3N0fS95dW5vbmxpbmUvdjEvZ29sZD91bmlvbmlkPXtPMDBPT09PMDAwT08wTzAwTy51bmlvbklkfSZ0aW1lPXt0cygpfSIgICMgbGluZToyMTA6dSA9IGYiaHR0cDovL3tzZWxmLmRvbW5haW5Ib3N0fS95dW5vbmxpbmUvdjEvZ29sZD91bmlvbmlkPXtzZWxmLnVuaW9uSWR9JnRpbWU9e3RzKCl9IgogICAgICAgICAgICBPME9PT09PMDAwME8wMDBPMCA9IE8wME9PT08wMDBPTzBPMDBPLnNlYy5nZXQoCiAgICAgICAgICAgICAgICBPMDBPME8wMDBPTzBPMDAwMAogICAgICAgICAgICApICAjIGxpbmU6MjExOnIgPSBzZWxmLnNlYy5nZXQodSkKICAgICAgICAgICAgT08wTzAwT09PT09PTzAwTzAgPSBPME9PT09PMDAwME8wMDBPMC5qc29uKCkgICMgbGluZToyMTM6cmogPSByLmpzb24oKQogICAgICAgICAgICBPMDBPT09PMDAwT08wTzAwTy5yZW1haW4gPSBtYXRoLmZsb29yKAogICAgICAgICAgICAgICAgaW50KE9PME8wME9PT09PT08wME8wLmdldCgiZGF0YSIpLmdldCgibGFzdF9nb2xkIikpCiAgICAgICAgICAgICkgICMgbGluZToyMTQ6c2VsZi5yZW1haW4gPSBtYXRoLmZsb29yKGludChyai5nZXQoImRhdGEiKS5nZXQoImxhc3RfZ29sZCIpKSkKICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICBmJ+S7iuaXpeW3sue7j+mYheivu+S6hntPTzBPMDBPT09PT09PMDBPMC5nZXQoImRhdGEiKS5nZXQoImRheV9yZWFkIil956+H5paH56ugLOWJqeS9mXtPTzBPMDBPT09PT09PMDBPMC5nZXQoImRhdGEiKS5nZXQoInJlbWFpbl9yZWFkIil95pyq6ZiF6K+777yM5LuK5pel6I635Y+W6YeR5biBe09PME8wME9PT09PT08wME8wLmdldCgiZGF0YSIpLmdldCgiZGF5X2dvbGQiKX3vvIzliankvZl7TzAwT09PTzAwME9PME8wME8ucmVtYWlufScKICAgICAgICAgICAgKSAgIyBsaW5lOjIxNzopCiAgICAgICAgZXhjZXB0OiAgIyBsaW5lOjIxODpleGNlcHQ6CiAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgZiLotKblj7dbe08wME9PT08wMDBPTzBPMDBPLm5hbWV9XeiOt+WPlumHkeW4geWksei0pSIKICAgICAgICAgICAgKSAgIyBsaW5lOjIxOTpwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV3ojrflj5bph5HluIHlpLHotKUiKQogICAgICAgICAgICByZXR1cm4gRmFsc2UgICMgbGluZToyMjA6cmV0dXJuIEZhbHNlCgogICAgZGVmIGdldEtleShPMDBPMDAwMDAwTzBPT09PMCk6ICAjIGxpbmU6MjIyOmRlZiBnZXRLZXkoc2VsZik6CiAgICAgICAgT08wT08wT09PMDAwME9PME8gPSAiIiAgIyBsaW5lOjIyMzp1ayA9ICIiCiAgICAgICAgTzBPT09PMDAwT09PT08wTzAgPSBOb25lICAjIGxpbmU6MjI0OnVrUmVzID0gTm9uZQogICAgICAgIGZvciBPT09PT09PME9PME8wT09PMCBpbiByYW5nZSgxMCk6ICAjIGxpbmU6MjI1OmZvciBpIGluIHJhbmdlKDEwKToKICAgICAgICAgICAgTzBPT08wME8wT08wMDAwMDAgPSBmImh0dHA6Ly97TzAwTzAwMDAwME8wT09PTzAuZG9tbmFpbkhvc3R9L3l1bm9ubGluZS92MS93dG1wZG9tYWluIiAgIyBsaW5lOjIyNjp1ID0gZiJodHRwOi8ve3NlbGYuZG9tbmFpbkhvc3R9L3l1bm9ubGluZS92MS93dG1wZG9tYWluIgogICAgICAgICAgICBPME9PME9PTzBPT08wME9PTyA9IGYidW5pb25pZD17TzAwTzAwMDAwME8wT09PTzAudW5pb25JZH0iICAjIGxpbmU6MjI4OnAgPSBmInVuaW9uaWQ9e3NlbGYudW5pb25JZH0iCiAgICAgICAgICAgIE8wT08wME9PMDBPT09PT08wID0gcmVxdWVzdHMucG9zdCgKICAgICAgICAgICAgICAgIE8wT09PMDBPME9PMDAwMDAwLAogICAgICAgICAgICAgICAgaGVhZGVycz1PMDBPMDAwMDAwTzBPT09PMC5oZWFkZXJzLAogICAgICAgICAgICAgICAgZGF0YT1PME9PME9PTzBPT08wME9PTywKICAgICAgICAgICAgICAgIHZlcmlmeT1GYWxzZSwKICAgICAgICAgICAgKSAgIyBsaW5lOjIyOTpyID0gcmVxdWVzdHMucG9zdCh1LCBoZWFkZXJzPXNlbGYuaGVhZGVycywgZGF0YT1wLCB2ZXJpZnk9RmFsc2UpCiAgICAgICAgICAgIE9PT08wME8wMDAwMDAwT09PID0gTzBPTzAwT08wME9PT09PTzAuanNvbigpICAjIGxpbmU6MjMxOnJqID0gci5qc29uKCkKICAgICAgICAgICAgTzAwME8wME8wME8wME9PTzAgPSBPT09PMDBPMDAwMDAwME9PTy5nZXQoImRhdGEiKS5nZXQoCiAgICAgICAgICAgICAgICAiZG9tYWluIgogICAgICAgICAgICApICAjIGxpbmU6MjMyOmRvbWFpbiA9IHJqLmdldCgiZGF0YSIpLmdldCgiZG9tYWluIikKICAgICAgICAgICAgTzAwMDBPME8wTzAwTzAwME8gPSBwYXJzZV9xcygKICAgICAgICAgICAgICAgIHVybHBhcnNlKE8wMDBPMDBPMDBPMDBPT08wKS5xdWVyeQogICAgICAgICAgICApICAjIGxpbmU6MjM0OnBwID0gcGFyc2VfcXModXJscGFyc2UoZG9tYWluKS5xdWVyeSkKICAgICAgICAgICAgTzAwMDBPMDAwTzAwTzBPME8gPSB1cmxwYXJzZSgKICAgICAgICAgICAgICAgIE8wMDBPMDBPMDBPMDBPT08wCiAgICAgICAgICAgICkubmV0bG9jICAjIGxpbmU6MjM1OmhuID0gdXJscGFyc2UoZG9tYWluKS5uZXRsb2MKICAgICAgICAgICAgT08wT08wT09PMDAwME9PME8gPSBPMDAwME8wTzBPMDBPMDAwTy5nZXQoInVrIilbCiAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgIF0gICMgbGluZToyMzY6dWsgPSBwcC5nZXQoInVrIilbMF0KICAgICAgICAgICAgTzBPT09PMDAwT09PT08wTzAgPSBPME9PMDBPTzAwT09PT09PMC50ZXh0ICAjIGxpbmU6MjM3OnVrUmVzID0gci50ZXh0CiAgICAgICAgICAgIGlmIE9PME9PME9PTzAwMDBPTzBPOiAgIyBsaW5lOjIzODppZiB1azoKICAgICAgICAgICAgICAgIGJyZWFrICAjIGxpbmU6MjM5OmJyZWFrCiAgICAgICAgaWYgT08wT08wT09PMDAwME9PME8gPT0gIiI6ICAjIGxpbmU6MjQwOmlmIHVrID09ICIiOgogICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgIGYi6LSm5Y+3W3tPMDBPMDAwMDAwTzBPT09PMC5uYW1lfV3ojrflj5Z1a+Wksei0pe+8jOi/lOWbnumUmeivr++8mntPME9PT08wMDBPT09PTzBPMH0iCiAgICAgICAgICAgICkgICMgbGluZToyNDE6cHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d6I635Y+WdWvlpLHotKXvvIzov5Tlm57plJnor6/vvJp7dWtSZXN9IikKICAgICAgICAgICAgcmV0dXJuICAjIGxpbmU6MjQyOnJldHVybgogICAgICAgIHRpbWUuc2xlZXAoOCkgICMgbGluZToyNDM6dGltZS5zbGVlcCg4KQogICAgICAgIE8wT08wME9PMDBPT09PT08wID0gcmVxdWVzdHMuZ2V0KAogICAgICAgICAgICBPMDAwTzAwTzAwTzAwT09PMCwKICAgICAgICAgICAgaGVhZGVycz17CiAgICAgICAgICAgICAgICAiQWNjZXB0IjogInRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOSIsCiAgICAgICAgICAgICAgICAiQWNjZXB0LUVuY29kaW5nIjogImd6aXAsIGRlZmxhdGUsIGJyIiwKICAgICAgICAgICAgICAgICJBY2NlcHQtTGFuZ3VhZ2UiOiAiemgtQ04semg7cT0wLjkiLAogICAgICAgICAgICAgICAgIkNvbm5lY3Rpb24iOiAia2VlcC1hbGl2ZSIsCiAgICAgICAgICAgICAgICAiSG9zdCI6IGYie08wMDAwTzAwME8wME8wTzBPfSIsCiAgICAgICAgICAgICAgICAiU2VjLUZldGNoLURlc3QiOiAiZG9jdW1lbnQiLAogICAgICAgICAgICAgICAgIlNlYy1GZXRjaC1Nb2RlIjogIm5hdmlnYXRlIiwKICAgICAgICAgICAgICAgICJTZWMtRmV0Y2gtU2l0ZSI6ICJub25lIiwKICAgICAgICAgICAgICAgICJTZWMtRmV0Y2gtVXNlciI6ICI/MSIsCiAgICAgICAgICAgICAgICAiVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0cyI6ICIxIiwKICAgICAgICAgICAgICAgICJVc2VyLUFnZW50IjogIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMDcuMC4wLjAgU2FmYXJpLzUzNy4zNiBOZXRUeXBlL1dJRkkgTWljcm9NZXNzZW5nZXIvNy4wLjIwLjE3ODEoMHg2NzAwMTQzQikgV2luZG93c1dlY2hhdCgweDYzMDkwNzFkKSBYV0VCLzg0NjEgRmx1ZSIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHZlcmlmeT1GYWxzZSwKICAgICAgICApICAjIGxpbmU6MjYwOikKICAgICAgICBwcmludCgKICAgICAgICAgICAgZiLotKblj7dbe08wME8wMDAwMDBPME9PT08wLm5hbWV9XSDpmIXor7vlh4blpIfmiJDlip8g5Y2z5bCG5byA5aeL6ZiF6K+7IOKchSDvvIzpmIXor7vlj4LmlbDkuLrvvJp7T08wT08wT09PMDAwME9PME99IgogICAgICAgICkgICMgbGluZToyNjI6cHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1dIOmYheivu+WHhuWkh+aIkOWKnyDljbPlsIblvIDlp4vpmIXor7sg4pyFIO+8jOmYheivu+WPguaVsOS4uu+8mnt1a30iKQogICAgICAgIE8wME9PTzBPTzBPTzBPME8wID0gewogICAgICAgICAgICAiQWNjZXB0IjogImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdCwgKi8qOyBxPTAuMDEiLAogICAgICAgICAgICAiQWNjZXB0LUVuY29kaW5nIjogImd6aXAsIGRlZmxhdGUsIGJyIiwKICAgICAgICAgICAgIkFjY2VwdC1MYW5ndWFnZSI6ICJ6aC1DTix6aDtxPTAuOSIsCiAgICAgICAgICAgICJDb25uZWN0aW9uIjogImtlZXAtYWxpdmUiLAogICAgICAgICAgICAiSG9zdCI6ICJuc3IuenNmMjAyM2U0NTguY2xvdWQiLAogICAgICAgICAgICAiT3JpZ2luIjogZiJodHRwczovL3tPMDAwME8wMDBPMDBPME8wT30iLAogICAgICAgICAgICAiU2VjLUZldGNoLURlc3QiOiAiZW1wdHkiLAogICAgICAgICAgICAiU2VjLUZldGNoLU1vZGUiOiAiY29ycyIsCiAgICAgICAgICAgICJTZWMtRmV0Y2gtU2l0ZSI6ICJjcm9zcy1zaXRlIiwKICAgICAgICAgICAgIlVzZXItQWdlbnQiOiAiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEwNy4wLjAuMCBTYWZhcmkvNTM3LjM2IE5ldFR5cGUvV0lGSSBNaWNyb01lc3Nlbmdlci83LjAuMjAuMTc4MSgweDY3MDAxNDNCKSBXaW5kb3dzV2VjaGF0KDB4NjMwOTA3MWQpIFhXRUIvODQ2MSBGbHVlIiwKICAgICAgICB9ICAjIGxpbmU6Mjc0On0KICAgICAgICByZXR1cm4gT08wT08wT09PMDAwME9PME8sIE8wME9PTzBPTzBPTzBPME8wICAjIGxpbmU6Mjc1OnJldHVybiB1aywgaAoKICAgIGRlZiByZWFkKE9PT08wMDAwME8wMDBPME8wKTogICMgbGluZToyNzc6ZGVmIHJlYWQoc2VsZik6CiAgICAgICAgTzBPT09PTzAwTzBPME9PT08gPSBPT09PMDAwMDBPMDAwTzBPMC5nZXRLZXkoKSAgIyBsaW5lOjI3ODppbmZvID0gc2VsZi5nZXRLZXkoKQogICAgICAgIGlmIGxlbihPME9PT09PMDBPME8wT09PTykgPT0gMDogICMgbGluZToyNzk6aWYgbGVuKGluZm8pID09IDA6CiAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgZiLotKblj7dbe09PT08wMDAwME8wMDBPME8wLm5hbWV9XeiOt+WPlumYheivu+WPguaVsOWksei0pe+8jOWBnOatouW+gOWQjumYheivu++8geKaoO+4jyAiCiAgICAgICAgICAgICkgICMgbGluZToyODA6cHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d6I635Y+W6ZiF6K+75Y+C5pWw5aSx6LSl77yM5YGc5q2i5b6A5ZCO6ZiF6K+777yB4pqg77iPICIpCiAgICAgICAgICAgIHJldHVybiAgIyBsaW5lOjI4MTpyZXR1cm4KICAgICAgICB0aW1lLnNsZWVwKDIpICAjIGxpbmU6MjgzOnRpbWUuc2xlZXAoMikKICAgICAgICBPTzAwME9PT09PME8wMDAwMCA9IDEgICMgbGluZToyODQ6YXJjdGlsZVRpbWUgPSAxCiAgICAgICAgTzBPT08wMDBPTzAwME9PME8gPSAiIiAgIyBsaW5lOjI4NTpsYXN0ZXN0QXJjdGljbGVJZCA9ICIiCiAgICAgICAgd2hpbGUgVHJ1ZTogICMgbGluZToyODY6d2hpbGUgVHJ1ZToKICAgICAgICAgICAgTzBPT09PTzAwTzAwT09PME8gPSB7ImVycmNvZGUiOiAtMX0gICMgbGluZToyODc6cmVzID0geyJlcnJjb2RlIjogLTF9CiAgICAgICAgICAgIE9PT09PME8wME9PME9PTzBPID0gMCAgIyBsaW5lOjI4ODpyZWZyZXNoVGltZSA9IDAKICAgICAgICAgICAgd2hpbGUgKAogICAgICAgICAgICAgICAgTzBPT09PTzAwTzAwT09PME9bImVycmNvZGUiXSAhPSAwCiAgICAgICAgICAgICk6ICAjIGxpbmU6Mjg5OndoaWxlIHJlc1siZXJyY29kZSJdICE9IDA6CiAgICAgICAgICAgICAgICBPME9PT09PTzBPMDBPT08wTyA9IHN0cih0cygpKSAgIyBsaW5lOjI5MDp0aW1lU3RhbXAgPSBzdHIodHMoKSkKICAgICAgICAgICAgICAgIE8wT09PMDAwME8wMDAwME9PID0gaGFzaGxpYi5tZDUoCiAgICAgICAgICAgICAgICAgICAgKAogICAgICAgICAgICAgICAgICAgICAgICBPME9PT09PMDBPME8wT09PT1sxXVsiT3JpZ2luIl0ucmVwbGFjZSgiaHR0cHM6Ly8iLCAiIilbOjExXQogICAgICAgICAgICAgICAgICAgICAgICArIE8wT09PT08wME8wTzBPT09PWzBdCiAgICAgICAgICAgICAgICAgICAgICAgICsgTzBPT09PT08wTzAwT09PME8KICAgICAgICAgICAgICAgICAgICAgICAgKyAiQSZJMjVMSUxJWURTJCIKICAgICAgICAgICAgICAgICAgICApLmVuY29kZSgpCiAgICAgICAgICAgICAgICApLmhleGRpZ2VzdCgpICAjIGxpbmU6Mjk4OikuaGV4ZGlnZXN0KCkKICAgICAgICAgICAgICAgIE9PT08wMDAwME8wMDBPME8wLnBhcmFtcyA9IHsKICAgICAgICAgICAgICAgICAgICAidWsiOiBPME9PT09PMDBPME8wT09PT1swXSwKICAgICAgICAgICAgICAgICAgICAidGltZSI6IE8wT09PT09PME8wME9PTzBPLAogICAgICAgICAgICAgICAgICAgICJwc2duIjogTzBPT08wMDAwTzAwMDAwT08sCiAgICAgICAgICAgICAgICB9ICAjIGxpbmU6Mjk5OnNlbGYucGFyYW1zID0geyJ1ayI6IGluZm9bMF0sICJ0aW1lIjogdGltZVN0YW1wLCAicHNnbiI6IHBzZ259CiAgICAgICAgICAgICAgICBPT09PT08wT08wMDAwME8wTyA9IGYiaHR0cHM6Ly9uc3IuenNmMjAyM2U0NTguY2xvdWQveXVub25saW5lL3YxL2RvX3JlYWQiICAjIGxpbmU6MzAwOnUgPSBmImh0dHBzOi8vbnNyLnpzZjIwMjNlNDU4LmNsb3VkL3l1bm9ubGluZS92MS9kb19yZWFkIgogICAgICAgICAgICAgICAgTzBPME9PTzAwTzAwT09PMDAgPSByZXF1ZXN0cy5nZXQoCiAgICAgICAgICAgICAgICAgICAgT09PT09PME9PMDAwMDBPME8sCiAgICAgICAgICAgICAgICAgICAgaGVhZGVycz1PME9PT09PMDBPME8wT09PT1sxXSwKICAgICAgICAgICAgICAgICAgICBwYXJhbXM9T09PTzAwMDAwTzAwME8wTzAucGFyYW1zLAogICAgICAgICAgICAgICAgICAgIHZlcmlmeT1GYWxzZSwKICAgICAgICAgICAgICAgICAgICB0aW1lb3V0PTYwLAogICAgICAgICAgICAgICAgKSAgIyBsaW5lOjMwMzopCiAgICAgICAgICAgICAgICBwcmludCgiLSIgKiA1MCkgICMgbGluZTozMDQ6cHJpbnQoIi0iICogNTApCiAgICAgICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICAgICAgTzBPME9PTzAwTzAwT09PMDAudGV4dCBhbmQgTzBPME9PTzAwTzAwT09PMDAuanNvbigpWyJlcnJjb2RlIl0gPT0gMAogICAgICAgICAgICAgICAgKTogICMgbGluZTozMDk6aWYgci50ZXh0IGFuZCByLmpzb24oKVsiZXJyY29kZSJdID09IDA6CiAgICAgICAgICAgICAgICAgICAgTzBPT09PTzAwTzAwT09PME8gPSAoCiAgICAgICAgICAgICAgICAgICAgICAgIE8wTzBPT08wME8wME9PTzAwLmpzb24oKQogICAgICAgICAgICAgICAgICAgICkgICMgbGluZTozMTA6cmVzID0gci5qc29uKCkKICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgZiLotKblj7dbe09PT08wMDAwME8wMDBPME8wLm5hbWV9XeesrFt7T09PT08wTzAwT08wT09PME8rMX1d5qyh6I635Y+W56ysW3tPTzAwME9PT09PME8wMDAwMH1d56+H6ZiF6K+75paH56ugW3tPME9PT09PMDBPME8wT09PT1swXX1d6Lez6L2s6ZO+5o6l5oiQ5YqfIgogICAgICAgICAgICAgICAgICAgICkgICMgbGluZTozMTM6KQogICAgICAgICAgICAgICAgZWxzZTogICMgbGluZTozMTQ6ZWxzZToKICAgICAgICAgICAgICAgICAgICBPMDAwMDAwME8wMDBPT09PMCA9IGpzb24ubG9hZHMoCiAgICAgICAgICAgICAgICAgICAgICAgIE8wTzBPT08wME8wME9PTzAwLnRleHQKICAgICAgICAgICAgICAgICAgICApICAjIGxpbmU6MzE1OmRlY29kZWRfc3RyID0ganNvbi5sb2FkcyhyLnRleHQpCiAgICAgICAgICAgICAgICAgICAgaWYgTzAwMDAwMDBPMDAwT09PTzBbIm1zZyJdOiAgIyBsaW5lOjMxNjppZiBkZWNvZGVkX3N0clsibXNnIl06CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZiLotKblj7dbe09PT08wMDAwME8wMDBPME8wLm5hbWV9XeesrFt7T09PT08wTzAwT08wT09PME8rMX1d5qyh6I635Y+W56ysW3tPTzAwME9PT09PME8wMDAwMH1d56+H6ZiF6K+75paH56ugW3tPME9PT09PMDBPME8wT09PT1swXX1d6Lez6L2s6ZO+5o6l5aSx6LSl77yae08wMDAwMDAwTzAwME9PT08wWydtc2cnXX0iCiAgICAgICAgICAgICAgICAgICAgICAgICkgICMgbGluZTozMTk6KQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UgICMgbGluZTozMjA6cmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAgICAgZWxzZTogICMgbGluZTozMjE6ZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIui0puWPt1t7T09PTzAwMDAwTzAwME8wTzAubmFtZX1d56ysW3tPT09PTzBPMDBPTzBPT08wTysxfV3mrKHojrflj5bnrKxbe09PMDAwT09PT08wTzAwMDAwfV3nr4fpmIXor7vmlofnq6Bbe08wT09PT08wME8wTzBPT09PWzBdfV3ot7Povazpk77mjqXlpLHotKXvvJp7TzBPME9PTzAwTzAwT09PMDAudGV4dH0iCiAgICAgICAgICAgICAgICAgICAgICAgICkgICMgbGluZTozMjQ6KQogICAgICAgICAgICAgICAgdGltZS5zbGVlcCgxLjUpICAjIGxpbmU6MzI1OnRpbWUuc2xlZXAoMS41KQogICAgICAgICAgICAgICAgT09PT08wTzAwT08wT09PME8gPSAoCiAgICAgICAgICAgICAgICAgICAgT09PT08wTzAwT08wT09PME8gKyAxCiAgICAgICAgICAgICAgICApICAjIGxpbmU6MzI2OnJlZnJlc2hUaW1lID0gcmVmcmVzaFRpbWUgKyAxCiAgICAgICAgICAgICAgICBpZiBPT09PTzBPMDBPTzBPT08wTyA+PSA1OiAgIyBsaW5lOjMyNzppZiByZWZyZXNoVGltZSA+PSA1OgogICAgICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICAgICBmIuKaoO+4jyDotKblj7dbe09PT08wMDAwME8wMDBPME8wLm5hbWV9XeiOt+WPlumYheivu+esrFt7T08wMDBPT09PTzBPMDAwMDB9Xeevh+aWh+eroFt7TzBPT09PTzAwTzBPME9PT09bMF19Xei2heaXtuKApuKApiIKICAgICAgICAgICAgICAgICAgICApICAjIGxpbmU6MzI4OnByaW50KGYi4pqg77iPIOi0puWPt1t7c2VsZi5uYW1lfV3ojrflj5bpmIXor7vnrKxbe2FyY3RpbGVUaW1lfV3nr4fmlofnq6Bbe2luZm9bMF19Xei2heaXtuKApuKApiIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICAjIGxpbmU6MzI5OnJldHVybgogICAgICAgICAgICBPTzBPMDBPTzAwTzAwT09PMCA9ICIiICAjIGxpbmU6MzMwOndlY2hhdFBvc3RMaW5rID0gIiIKICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgTzBPT09PTzAwTzAwT09PME8uZ2V0KCJlcnJjb2RlIikgPT0gMAogICAgICAgICAgICApOiAgIyBsaW5lOjMzMTppZiByZXMuZ2V0KCJlcnJjb2RlIikgPT0gMDoKICAgICAgICAgICAgICAgIE8wMDAwME9PMDBPMDAwTzAwID0gIiIgICMgbGluZTozMzI6cmV0dXJuTGluayA9ICIiCiAgICAgICAgICAgICAgICB0cnk6ICAjIGxpbmU6MzMzOnRyeToKICAgICAgICAgICAgICAgICAgICBPMDAwMDBPTzAwTzAwME8wMCA9IE8wT09PT08wME8wME9PTzBPLmdldCgiZGF0YSIpLmdldCgKICAgICAgICAgICAgICAgICAgICAgICAgImxpbmsiCiAgICAgICAgICAgICAgICAgICAgKSAgIyBsaW5lOjMzNDpyZXR1cm5MaW5rID0gcmVzLmdldCgiZGF0YSIpLmdldCgibGluayIpCiAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIE8wTzAwMDAwME8wTzAwMDBPOiAgIyBsaW5lOjMzNTpleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIGYi4pqg77iPIOi0puWPt1t7T09PTzAwMDAwTzAwME8wTzAubmFtZX1d6I635Y+W6ZiF6K+756ysW3tPTzAwME9PT09PME8wMDAwMH1d56+H5paH56ugW3tPME9PT09PMDBPME8wT09PT1swXX1d6ZO+5o6l5aSx6LSl77yM55aR5Ly85Y+w5a2Q5o6l5Y+j5aSq5Z6D5Zy+77yM5bSp5LqG77yM6L+U5Zue5pWw5o2u5Li677yaIiwKICAgICAgICAgICAgICAgICAgICAgICAgTzBPT09PTzAwTzAwT09PME8uZ2V0KCJkYXRhIiksCiAgICAgICAgICAgICAgICAgICAgKSAgIyBsaW5lOjMzOTopCiAgICAgICAgICAgICAgICAgICAgY29udGludWUgICMgbGluZTozNDA6Y29udGludWUKICAgICAgICAgICAgICAgIGlmICgKICAgICAgICAgICAgICAgICAgICAibXAud2VpeGluLnFxLmNvbSIgaW4gTzAwMDAwT08wME8wMDBPMDAKICAgICAgICAgICAgICAgICk6ICAjIGxpbmU6MzQxOmlmICJtcC53ZWl4aW4ucXEuY29tIiBpbiByZXR1cm5MaW5rOgogICAgICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICAgICBmIui0puWPt1t7T09PTzAwMDAwTzAwME8wTzAubmFtZX1dIOmYheivu+esrFt7T08wMDBPT09PTzBPMDAwMDB9Xeevh+W+ruS/oeaWh+eroO+8mntPMDAwMDBPTzAwTzAwME8wMH0iCiAgICAgICAgICAgICAgICAgICAgKSAgIyBsaW5lOjM0MjpwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV0g6ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5b6u5L+h5paH56ug77yae3JldHVybkxpbmt9IikKICAgICAgICAgICAgICAgICAgICBPTzBPMDBPTzAwTzAwT09PMCA9ICgKICAgICAgICAgICAgICAgICAgICAgICAgTzAwMDAwT08wME8wMDBPMDAgICMgbGluZTozNDM6d2VjaGF0UG9zdExpbmsgPSByZXR1cm5MaW5rCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgZWxzZTogICMgbGluZTozNDQ6ZWxzZToKICAgICAgICAgICAgICAgICAgICBPTzBPMDBPTzAwTzAwT09PMCA9IE9PT08wMDAwME8wMDBPME8wLmp1bXAoCiAgICAgICAgICAgICAgICAgICAgICAgIE8wMDAwME9PMDBPMDAwTzAwCiAgICAgICAgICAgICAgICAgICAgKSAgIyBsaW5lOjM0Njp3ZWNoYXRQb3N0TGluayA9IHNlbGYuanVtcChyZXR1cm5MaW5rKQogICAgICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICAgICBmIui0puWPt1t7T09PTzAwMDAwTzAwME8wTzAubmFtZX1dIOmYheivu+esrFt7T08wMDBPT09PTzBPMDAwMDB9Xeevh+W+ruS/oeaWh+eroO+8mntPTzBPMDBPTzAwTzAwT09PMH0iCiAgICAgICAgICAgICAgICAgICAgKSAgIyBsaW5lOjM0NzpwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV0g6ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5b6u5L+h5paH56ug77yae3dlY2hhdFBvc3RMaW5rfSIpCiAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICBmIui0puWPt1t7T09PTzAwMDAwTzAwME8wTzAubmFtZX1dIOmYheivu+esrFt7T08wMDBPT09PTzBPMDAwMDB9Xeevh+aWh+eroO+8mntPTzBPMDBPTzAwTzAwT09PMH0iCiAgICAgICAgICAgICAgICApICAjIGxpbmU6MzQ4OnByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XSDpmIXor7vnrKxbe2FyY3RpbGVUaW1lfV3nr4fmlofnq6DvvJp7d2VjaGF0UG9zdExpbmt9IikKICAgICAgICAgICAgICAgIE9PTzAwT08wTzAwMDBPT08wID0gZ2V0aW5mbygKICAgICAgICAgICAgICAgICAgICBPTzBPMDBPTzAwTzAwT09PMAogICAgICAgICAgICAgICAgKSAgIyBsaW5lOjM0OTphID0gZ2V0aW5mbyh3ZWNoYXRQb3N0TGluaykKICAgICAgICAgICAgICAgIGlmIE9PTzAwT08wTzAwMDBPT08wID09IEZhbHNlOiAgIyBsaW5lOjM1MDppZiBhID09IEZhbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICAgICBmIuKaoO+4jyDotKblj7dbe09PT08wMDAwME8wMDBPME8wLm5hbWV9XeWboCDojrflj5blhazkvJflj7fmlofnq6Dkv6Hmga/kuI3miJDlip/vvIzlr7zoh7TpmIXor7vnrKxbe09PMDAwT09PT08wTzAwMDAwfV3nr4fmlofnq6Bbe08wT09PT08wME8wTzBPT09PWzBdfV0g5aSx6LSl4oCm4oCmIgogICAgICAgICAgICAgICAgICAgICkgICMgbGluZTozNTM6KQogICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZSAgIyBsaW5lOjM1NDpyZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgIE8wT09PTzBPTzBPTzBPTzAwID0gcmFuZG9tLnJhbmRpbnQoCiAgICAgICAgICAgICAgICAgICAgNywgMTAKICAgICAgICAgICAgICAgICkgICMgbGluZTozNTU6c2xlZXBUaW1lID0gcmFuZG9tLnJhbmRpbnQoNywgMTApCiAgICAgICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICAgICAgY2hlY2tEaWN0LmdldChPT08wME9PME8wMDAwT09PMFs0XSkgIT0gTm9uZQogICAgICAgICAgICAgICAgICAgIG9yIChPME9PTzAwME9PMDAwT08wTyA9PSBPTzBPMDBPTzAwTzAwT09PMCkKICAgICAgICAgICAgICAgICAgICBvciAoIiZjaGtzbT0iIGluIE9PME8wME9PMDBPMDBPT08wKQogICAgICAgICAgICAgICAgKTogICMgbGluZTozNjE6KToKICAgICAgICAgICAgICAgICAgICBPME9PT08wT08wT08wT08wMCA9IHJhbmRvbS5yYW5kaW50KAogICAgICAgICAgICAgICAgICAgICAgICAxNSwgMjAKICAgICAgICAgICAgICAgICAgICApICAjIGxpbmU6MzYyOnNsZWVwVGltZSA9IHJhbmRvbS5yYW5kaW50KDE1LCAyMCkKICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgZiLimqDvuI8g6LSm5Y+3W3tPT09PMDAwMDBPMDAwTzBPMC5uYW1lfV3pmIXor7vnrKxbe09PMDAwT09PT08wTzAwMDAwfV3nr4fmlofnq6Bbe08wT09PT08wME8wTzBPT09PWzBdfV0g5qOA5rWL5Yiw55aR5Ly85qOA5rWL5paH56ug77yM5q2j5Zyo5o6o6YCB77yM562J5b6F6L+H5qOA5rWL77yM562J5b6F5pe26Ze077yae08wT09PTzBPTzBPTzBPTzAwfeenkuOAguOAguOAgiIKICAgICAgICAgICAgICAgICAgICApICAjIGxpbmU6MzY1OikKICAgICAgICAgICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICAgICAgICAgIE9PT08wMDAwME8wMDBPME8wLndlY2hhdEJ1c3NpbmVzc0tleQogICAgICAgICAgICAgICAgICAgICk6ICAjIGxpbmU6MzY2OmlmIHNlbGYud2VjaGF0QnVzc2luZXNzS2V5OgogICAgICAgICAgICAgICAgICAgICAgICBwdXNoV2VjaGF0QnVzc2luZXNzKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgT09PTzAwMDAwTzAwME8wTzAud2VjaGF0QnVzc2luZXNzS2V5LCBPTzBPMDBPTzAwTzAwT09PMAogICAgICAgICAgICAgICAgICAgICAgICApICAjIGxpbmU6MzY3OnB1c2hXZWNoYXRCdXNzaW5lc3Moc2VsZi53ZWNoYXRCdXNzaW5lc3NLZXksIHdlY2hhdFBvc3RMaW5rKQogICAgICAgICAgICAgICAgICAgIGVsaWYgT09PTzAwMDAwTzAwME8wTzAuYXBwVG9rZW46ICAjIGxpbmU6MzY4OmVsaWYgc2VsZi5hcHBUb2tlbjoKICAgICAgICAgICAgICAgICAgICAgICAgcHVzaCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9PT08wMDAwME8wMDBPME8wLmFwcFRva2VuLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgT09PTzAwMDAwTzAwME8wTzAudG9waWNJZHMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAi5bCP6ZiF6ZiF6ZiF6K+76L+H5qOA5rWLIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9PME8wME9PMDBPMDBPT08wLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZiLotKblj7dbe09PT08wMDAwME8wMDBPME8wLm5hbWV9XemYheivu+esrFt7T08wMDBPT09PTzBPMDAwMDB9Xeevh+aWh+eroFt7TzBPT09PTzAwTzBPME9PT09bMF19XSDmraPlnKjnrYnlvoXov4fmo4DmtYvvvIznrYnlvoXml7bpl7TvvJp7TzBPT09PME9PME9PME9PMDB956eSXG7lubvnlJ/mj5DnpLrvvJrlv6vngrnvvIzliKvogL3mkIHml7bpl7TkuobvvIEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInh5eXlkIiwKICAgICAgICAgICAgICAgICAgICAgICAgKSAgIyBsaW5lOjM3NjopCiAgICAgICAgICAgICAgICAgICAgZWxzZTogICMgbGluZTozNzc6ZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIuKaoO+4jyDotKblj7dbe09PT08wMDAwME8wMDBPME8wLm5hbWV9XemYheivu+esrFt7T08wMDBPT09PTzBPMDAwMDB9Xeevh+aWh+eroFt7TzBPT09PTzAwTzBPME9PT09bMF19XSDpnIDopoHov4fmo4DmtYvvvIzkvYbmmK/mnKrphY3nva7mjqjpgIF0b2tlbu+8jOS4uuS6humBv+WFjem7keWPt++8jOWBnOatoumYheivu+OAguOAguOAgiIKICAgICAgICAgICAgICAgICAgICAgICAgKSAgIyBsaW5lOjM4MDopCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZSAgIyBsaW5lOjM4MTpyZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgIGVsc2U6ICAjIGxpbmU6MzgyOmVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIGYi4pyFIOi0puWPt1t7T09PTzAwMDAwTzAwME8wTzAubmFtZX1d6ZiF6K+756ysW3tPTzAwME9PT09PME8wMDAwMH1d56+H5paH56ugW3tPME9PT09PMDBPME8wT09PT1swXX1dIOmdnuajgOa1i+aWh+eroO+8jOaooeaLn+ivu3tPME9PT08wT08wT08wT08wMH3np5IiCiAgICAgICAgICAgICAgICAgICAgKSAgIyBsaW5lOjM4NTopCiAgICAgICAgICAgICAgICBPME9PTzAwME9PMDAwT08wTyA9ICgKICAgICAgICAgICAgICAgICAgICBPTzBPMDBPTzAwTzAwT09PMCAgIyBsaW5lOjM4NjpsYXN0ZXN0QXJjdGljbGVJZCA9IHdlY2hhdFBvc3RMaW5rCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBPT09PMDAwMDBPMDAwTzBPMC5sYXN0Yml6ID0gT09PMDBPTzBPMDAwME9PTzBbCiAgICAgICAgICAgICAgICAgICAgNAogICAgICAgICAgICAgICAgXSAgIyBsaW5lOjM4NzpzZWxmLmxhc3RiaXogPSBhWzRdCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKE8wT09PTzBPTzBPTzBPTzAwKSAgIyBsaW5lOjM4ODp0aW1lLnNsZWVwKHNsZWVwVGltZSkKICAgICAgICAgICAgICAgIE9PME9PME8wMDAwMDBPTzBPID0gZiJodHRwOi8vbnNyLnpzZjIwMjNlNDU4LmNsb3VkL3l1bm9ubGluZS92MS9nZXRfcmVhZF9nb2xkP3VrPXtPME9PT09PMDBPME8wT09PT1swXX0mdGltZT17TzBPT09PME9PME9PME9PMDB9JnRpbWVzdGFtcD17dHMoKX0iICAjIGxpbmU6Mzg5OnUxID0gZiJodHRwOi8vbnNyLnpzZjIwMjNlNDU4LmNsb3VkL3l1bm9ubGluZS92MS9nZXRfcmVhZF9nb2xkP3VrPXtpbmZvWzBdfSZ0aW1lPXtzbGVlcFRpbWV9JnRpbWVzdGFtcD17dHMoKX0iCiAgICAgICAgICAgICAgICBPMDAwT09PMDBPT08wTzAwMCA9IHJlcXVlc3RzLmdldCgKICAgICAgICAgICAgICAgICAgICBPTzBPTzBPMDAwMDAwT08wTywgaGVhZGVycz1PME9PT09PMDBPME8wT09PT1sxXSwgdmVyaWZ5PUZhbHNlCiAgICAgICAgICAgICAgICApICAjIGxpbmU6MzkwOnIxID0gcmVxdWVzdHMuZ2V0KHUxLCBoZWFkZXJzPWluZm9bMV0sIHZlcmlmeT1GYWxzZSkKICAgICAgICAgICAgICAgIGlmICgKICAgICAgICAgICAgICAgICAgICBPMDAwT09PMDBPT08wTzAwMC50ZXh0IGFuZCBPMDAwT09PMDBPT08wTzAwMC5qc29uKCkKICAgICAgICAgICAgICAgICk6ICAjIGxpbmU6MzkxOmlmIHIxLnRleHQgYW5kIHIxLmpzb24oKToKICAgICAgICAgICAgICAgICAgICB0cnk6ICAjIGxpbmU6MzkyOnRyeToKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIuKchSDotKblj7dbe09PT08wMDAwME8wMDBPME8wLm5hbWV9XemYheivu+esrFt7T08wMDBPT09PTzBPMDAwMDB9Xeevh+aWh+eroFt7TzBPT09PTzAwTzBPME9PT09bMF19XeaJgOW+l+mHkeW4ge+8mntPMDAwT09PMDBPT08wTzAwMC5qc29uKClbJ2RhdGEnXVsnZ29sZCddfeS4qu+8jOi0puaIt+W9k+WJjemHkeW4ge+8mntPMDAwT09PMDBPT08wTzAwMC5qc29uKClbJ2RhdGEnXVsnbGFzdF9nb2xkJ1195Liq77yM5LuK5pel5bey6K+777yae08wMDBPT08wME9PTzBPMDAwLmpzb24oKVsnZGF0YSddWydkYXlfcmVhZCddfeasoe+8jOS7iuaXpeacquivuyB7TzAwME9PTzAwT09PME8wMDAuanNvbigpWydkYXRhJ11bJ3JlbWFpbl9yZWFkJ11956+H5paH56ugIgogICAgICAgICAgICAgICAgICAgICAgICApICAjIGxpbmU6Mzk1OikKICAgICAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIE8wTzAwMDAwME8wTzAwMDBPOiAgIyBsaW5lOjM5NjpleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZiLinYwg6LSm5Y+3W3tPT09PMDAwMDBPMDAwTzBPMC5uYW1lfV3pmIXor7vnrKxbe09PMDAwT09PT08wTzAwMDAwfV3nr4fmlofnq6Bbe08wT09PT08wME8wTzBPT09PWzBdfV3lvILluLjvvJp7TzAwME9PTzAwT09PME8wMDAuanNvbigpLmdldCgnbXNnJyl9IgogICAgICAgICAgICAgICAgICAgICAgICApICAjIGxpbmU6Mzk5OikKICAgICAgICAgICAgICAgICAgICAgICAgaWYgIuacrOasoemYheivu+aXoOaViCIgaW4gTzAwME9PTzAwT09PME8wMDAuanNvbigpLmdldCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJtc2ciCiAgICAgICAgICAgICAgICAgICAgICAgICk6ICAjIGxpbmU6NDAwOmlmICLmnKzmrKHpmIXor7vml6DmlYgiIGluIHIxLmpzb24oKS5nZXQoIm1zZyIpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUgICMgbGluZTo0MDE6Y29udGludWUKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZTogICMgbGluZTo0MDI6ZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrICAjIGxpbmU6NDAzOmJyZWFrCiAgICAgICAgICAgICAgICBlbHNlOiAgIyBsaW5lOjQwNDplbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICAgICBmIuKdjCDotKblj7dbe09PT08wMDAwME8wMDBPME8wLm5hbWV9XemYheivu+esrFt7T08wMDBPT09PTzBPMDAwMDB9Xeevh+aWh+eroFt7TzBPT09PTzAwTzBPME9PT09bMF19XeWksei0pe+8mntPMDAwT09PMDBPT08wTzAwMC50ZXh0fSIKICAgICAgICAgICAgICAgICAgICApICAjIGxpbmU6NDA3OikKICAgICAgICAgICAgICAgICAgICBicmVhayAgIyBsaW5lOjQwODpicmVhawogICAgICAgICAgICBlbGlmICgKICAgICAgICAgICAgICAgIE8wT09PT08wME8wME9PTzBPLmdldCgiZXJyY29kZSIpID09IDQwNQogICAgICAgICAgICApOiAgIyBsaW5lOjQwOTplbGlmIHJlcy5nZXQoImVycmNvZGUiKSA9PSA0MDU6CiAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICBmIuKaoO+4jyDotKblj7dbe09PT08wMDAwME8wMDBPME8wLm5hbWV9XemYheivu+esrFt7T08wMDBPT09PTzBPMDAwMDB9Xeevh+aWh+eroFt7TzBPT09PTzAwTzBPME9PT09bMF19XemYheivu+mHjeWkjSIKICAgICAgICAgICAgICAgICkgICMgbGluZTo0MTA6cHJpbnQoZiLimqDvuI8g6LSm5Y+3W3tzZWxmLm5hbWV9XemYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1d6ZiF6K+76YeN5aSNIikKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMS41KSAgIyBsaW5lOjQxMTp0aW1lLnNsZWVwKDEuNSkKICAgICAgICAgICAgZWxpZiAoCiAgICAgICAgICAgICAgICBPME9PT09PMDBPMDBPT08wTy5nZXQoImVycmNvZGUiKSA9PSA0MDcKICAgICAgICAgICAgKTogICMgbGluZTo0MTI6ZWxpZiByZXMuZ2V0KCJlcnJjb2RlIikgPT0gNDA3OgogICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgZiLimqDvuI8g6LSm5Y+3W3tPT09PMDAwMDBPMDAwTzBPMC5uYW1lfV3pmIXor7vnrKxbe09PMDAwT09PT08wTzAwMDAwfV3nr4fmlofnq6Bbe08wT09PT08wME8wTzBPT09PWzBdfV3pmIXor7vnu5PmnZ8iCiAgICAgICAgICAgICAgICApICAjIGxpbmU6NDEzOnByaW50KGYi4pqg77iPIOi0puWPt1t7c2VsZi5uYW1lfV3pmIXor7vnrKxbe2FyY3RpbGVUaW1lfV3nr4fmlofnq6Bbe2luZm9bMF19XemYheivu+e7k+adnyIpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZSAgIyBsaW5lOjQxNDpyZXR1cm4gVHJ1ZQogICAgICAgICAgICBlbHNlOiAgIyBsaW5lOjQxNTplbHNlOgogICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgZiLimqDvuI8g6LSm5Y+3W3tPT09PMDAwMDBPMDAwTzBPMC5uYW1lfV3pmIXor7vnrKxbe09PMDAwT09PT08wTzAwMDAwfV3nr4fmlofnq6Bbe08wT09PT08wME8wTzBPT09PWzBdfV3mnKrnn6Xmg4XlhrUiCiAgICAgICAgICAgICAgICApICAjIGxpbmU6NDE2OnByaW50KGYi4pqg77iPIOi0puWPt1t7c2VsZi5uYW1lfV3pmIXor7vnrKxbe2FyY3RpbGVUaW1lfV3nr4fmlofnq6Bbe2luZm9bMF19XeacquefpeaDheWGtSIpCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDEuNSkgICMgbGluZTo0MTc6dGltZS5zbGVlcCgxLjUpCiAgICAgICAgICAgIE9PMDAwT09PT08wTzAwMDAwID0gKAogICAgICAgICAgICAgICAgT08wMDBPT09PTzBPMDAwMDAgKyAxCiAgICAgICAgICAgICkgICMgbGluZTo0MTg6YXJjdGlsZVRpbWUgPSBhcmN0aWxlVGltZSArIDEKCiAgICBkZWYganVtcChPMDBPMDBPMDAwMDBPME8wTywgT08wME9PME9PMDBPMDBPTzApOiAgIyBsaW5lOjQyMDpkZWYganVtcChzZWxmLCBsaW5rKToKICAgICAgICBwcmludCgKICAgICAgICAgICAgZiLotKblj7dbe08wME8wME8wMDAwME8wTzBPLm5hbWV9XeW8gOWni+acrOasoemYheivu+KApuKApiIKICAgICAgICApICAjIGxpbmU6NDIxOnByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeW8gOWni+acrOasoemYheivu+KApuKApiIpCiAgICAgICAgT09PT08wMDAwTzAwME9PTzAgPSB1cmxwYXJzZSgKICAgICAgICAgICAgT08wME9PME9PMDBPMDBPTzAKICAgICAgICApLm5ldGxvYyAgIyBsaW5lOjQyMjpobiA9IHVybHBhcnNlKGxpbmspLm5ldGxvYwogICAgICAgIE9PMDBPT08wT08wME8wT08wID0gewogICAgICAgICAgICAiSG9zdCI6IE9PT09PMDAwME8wMDBPT08wLAogICAgICAgICAgICAiQ29ubmVjdGlvbiI6ICJrZWVwLWFsaXZlIiwKICAgICAgICAgICAgIlVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHMiOiAiMSIsCiAgICAgICAgICAgICJVc2VyLUFnZW50IjogIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMDcuMC4wLjAgU2FmYXJpLzUzNy4zNiBOZXRUeXBlL1dJRkkgTWljcm9NZXNzZW5nZXIvNy4wLjIwLjE3ODEoMHg2NzAwMTQzQikgV2luZG93c1dlY2hhdCgweDYzMDkwNjIxKSBYV0VCLzgzNTEgRmx1ZSIsCiAgICAgICAgICAgICJBY2NlcHQiOiAidGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45IiwKICAgICAgICAgICAgIkFjY2VwdC1FbmNvZGluZyI6ICJnemlwLCBkZWZsYXRlIiwKICAgICAgICAgICAgIkFjY2VwdC1MYW5ndWFnZSI6ICJ6aC1DTix6aCIsCiAgICAgICAgICAgICJDb29raWUiOiBmInlzbV91aWQ9e08wME8wME8wMDAwME8wTzBPLnlzbV91aWR9IiwKICAgICAgICB9ICAjIGxpbmU6NDMyOn0KICAgICAgICBPTzAwT09PTzAwMDBPT09PMCA9IHJlcXVlc3RzLmdldCgKICAgICAgICAgICAgT08wME9PME9PMDBPMDBPTzAsCiAgICAgICAgICAgIGhlYWRlcnM9T08wME9PTzBPTzAwTzBPTzAsCiAgICAgICAgICAgIGFsbG93X3JlZGlyZWN0cz1GYWxzZSwKICAgICAgICAgICAgdmVyaWZ5PUZhbHNlLAogICAgICAgICkgICMgbGluZTo0MzM6ciA9IHJlcXVlc3RzLmdldChsaW5rLCBoZWFkZXJzPWgsIGFsbG93X3JlZGlyZWN0cz1GYWxzZSwgdmVyaWZ5PUZhbHNlKQogICAgICAgIE9PT08wTzAwTzAwT09PME8wID0gT08wME9PT08wMDAwT09PTzAuaGVhZGVycy5nZXQoCiAgICAgICAgICAgICJMb2NhdGlvbiIKICAgICAgICApICAjIGxpbmU6NDM1OkxvY2F0aW9uID0gci5oZWFkZXJzLmdldCgiTG9jYXRpb24iKQogICAgICAgIHByaW50KAogICAgICAgICAgICBmIui0puWPt1t7TzAwTzAwTzAwMDAwTzBPME8ubmFtZX1d5byA5aeL6ZiF6K+75paH56ugIC0ge09PT08wTzAwTzAwT09PME8wfSIKICAgICAgICApICAjIGxpbmU6NDM2OnByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeW8gOWni+mYheivu+aWh+eroCAtIHtMb2NhdGlvbn0iKQogICAgICAgIHJldHVybiBPT09PME8wME8wME9PTzBPMCAgIyBsaW5lOjQzNzpyZXR1cm4gTG9jYXRpb24KCiAgICBkZWYgd2l0aGRyYXcoT08wMDAwMDAwME9PTzAwTzApOiAgIyBsaW5lOjQzOTpkZWYgd2l0aGRyYXcoc2VsZik6CiAgICAgICAgaWYgaW50KE9PMDAwMDAwMDBPT08wME8wLnJlbWFpbikgPCBpbnQoCiAgICAgICAgICAgIE9PMDAwMDAwMDBPT08wME8wLnR4YnoKICAgICAgICApOiAgIyBsaW5lOjQ0MDppZiBpbnQoc2VsZi5yZW1haW4pIDwgaW50KHNlbGYudHhieik6CiAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgZiLotKblj7dbe09PMDAwMDAwMDBPT08wME8wLm5hbWV9Xeayoeaciei+vuWIsOaPkOeOsOagh+WHhiIKICAgICAgICAgICAgKSAgIyBsaW5lOjQ0MTpwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV3msqHmnInovr7liLDmj5DnjrDmoIflh4YiKQogICAgICAgICAgICByZXR1cm4gRmFsc2UgICMgbGluZTo0NDI6cmV0dXJuIEZhbHNlCiAgICAgICAgT08wMDBPMDBPME9PTzBPTzAgPSAoCiAgICAgICAgICAgIGludChpbnQoT08wMDAwMDAwME9PTzAwTzAucmVtYWluKSAvIDEwMDApICogMTAwMAogICAgICAgICkgICMgbGluZTo0NDM6Z29sZCA9IGludChpbnQoc2VsZi5yZW1haW4pIC8gMTAwMCkgKiAxMDAwCiAgICAgICAgcHJpbnQoCiAgICAgICAgICAgIGYi6LSm5Y+3W3tPTzAwMDAwMDAwT09PMDBPMC5uYW1lfV3mnKzmrKHmj5DnjrDph5HluIEiLCBPTzAwME8wME8wT09PME9PMAogICAgICAgICkgICMgbGluZTo0NDQ6cHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d5pys5qyh5o+Q546w6YeR5biBIiwgZ29sZCkKICAgICAgICBpZiBPTzAwME8wME8wT09PME9PMDogICMgbGluZTo0NDU6aWYgZ29sZDoKICAgICAgICAgICAgT08wTzBPMDBPT08wTzAwTzAgPSB1cmxzcGxpdCgKICAgICAgICAgICAgICAgIE9PMDAwMDAwMDBPT08wME8wLmV4Y2hhbmdlUGFyYW1zCiAgICAgICAgICAgICkucXVlcnkgICMgbGluZTo0NDY6cXVlcnkgPSB1cmxzcGxpdChzZWxmLmV4Y2hhbmdlUGFyYW1zKS5xdWVyeQogICAgICAgICAgICBPME9PMDBPME9PME9PMDBPTyA9IHBhcnNlX3FzKAogICAgICAgICAgICAgICAgT08wTzBPMDBPT08wTzAwTzAKICAgICAgICAgICAgKSAgIyBsaW5lOjQ0NzpleGNoYW5nZVBhcmFtcyA9IHBhcnNlX3FzKHF1ZXJ5KQogICAgICAgICAgICBmb3IgKAogICAgICAgICAgICAgICAgT09PME9PMDBPME8wTzBPME8sCiAgICAgICAgICAgICAgICBPMDBPT09PTzAwMDBPME9PTywKICAgICAgICAgICAgKSBpbiAoCiAgICAgICAgICAgICAgICBPME9PMDBPME9PME9PMDBPTy5pdGVtcygpCiAgICAgICAgICAgICk6ICAjIGxpbmU6NDQ5OmZvciBrZXksIHZhbHVlIGluIGV4Y2hhbmdlUGFyYW1zLml0ZW1zKCk6CiAgICAgICAgICAgICAgICBPME9PMDBPME9PME9PMDBPT1tPT08wT08wME8wTzBPME8wT10gPSBPMDBPT09PTzAwMDBPME9PT1sKICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICBdICAjIGxpbmU6NDUwOmV4Y2hhbmdlUGFyYW1zW2tleV0gPSB2YWx1ZVswXQogICAgICAgICAgICBPMDAwMDBPTzBPME9PME8wTyA9IGYiaHR0cDovL3tPTzAwMDAwMDAwT09PMDBPMC5kb21uYWluSG9zdH0veXVub25saW5lL3YxL3VzZXJfZ29sZCIgICMgbGluZTo0NTI6dTEgPSBmImh0dHA6Ly97c2VsZi5kb21uYWluSG9zdH0veXVub25saW5lL3YxL3VzZXJfZ29sZCIKICAgICAgICAgICAgTzAwMDBPME8wME9PMDAwMDAgPSBmInVuaW9uaWQ9e08wT08wME8wT08wT08wME9PWyd1bmlvbmlkJ119JnJlcXVlc3RfaWQ9e08wT08wME8wT08wT08wME9PWydyZXF1ZXN0X2lkJ119JmdvbGQ9e09PMDAwTzAwTzBPT08wT08wfSIgICMgbGluZTo0NTM6cDEgPSBmInVuaW9uaWQ9e2V4Y2hhbmdlUGFyYW1zWyd1bmlvbmlkJ119JnJlcXVlc3RfaWQ9e2V4Y2hhbmdlUGFyYW1zWydyZXF1ZXN0X2lkJ119JmdvbGQ9e2dvbGR9IgogICAgICAgICAgICBPTzAwT08wMDBPT09PTzAwMCA9IHJlcXVlc3RzLnBvc3QoCiAgICAgICAgICAgICAgICBPMDAwMDBPTzBPME9PME8wTywKICAgICAgICAgICAgICAgIGRhdGE9TzAwMDBPME8wME9PMDAwMDAsCiAgICAgICAgICAgICAgICBoZWFkZXJzPXsKICAgICAgICAgICAgICAgICAgICAiQWNjZXB0IjogImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdCwgKi8qOyBxPTAuMDEiLAogICAgICAgICAgICAgICAgICAgICJBY2NlcHQtRW5jb2RpbmciOiAiZ3ppcCwgZGVmbGF0ZSIsCiAgICAgICAgICAgICAgICAgICAgIkFjY2VwdC1MYW5ndWFnZSI6ICJ6aC1DTix6aDtxPTAuOSIsCiAgICAgICAgICAgICAgICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLTgiLAogICAgICAgICAgICAgICAgICAgICJDb29raWUiOiBmInlzbXVpZD17T08wMDAwMDAwME9PTzAwTzAueXNtX3VpZH07IGVqZWN0Q29kZT0xIiwKICAgICAgICAgICAgICAgICAgICAiSG9zdCI6IGYie09PMDAwMDAwMDBPT08wME8wLmRvbW5haW5Ib3N0fSIsCiAgICAgICAgICAgICAgICAgICAgIk9yaWdpbiI6IGYiaHR0cDovL3tPTzAwMDAwMDAwT09PMDBPMC5kb21uYWluSG9zdH0iLAogICAgICAgICAgICAgICAgICAgICJQcm94eS1Db25uZWN0aW9uIjogImtlZXAtYWxpdmUiLAogICAgICAgICAgICAgICAgICAgICJSZWZlcmVyIjogZiJodHRwOi8ve09PMDAwMDAwMDBPT08wME8wLmRvbW5haW5Ib3N0fS95dW5vbmxpbmUvdjEvZXhjaGFuZ2V7T08wMDAwMDAwME9PTzAwTzAuZXhjaGFuZ2VQYXJhbXN9IiwKICAgICAgICAgICAgICAgICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTA3LjAuMC4wIFNhZmFyaS81MzcuMzYgTmV0VHlwZS9XSUZJIE1pY3JvTWVzc2VuZ2VyLzcuMC4yMC4xNzgxKDB4NjcwMDE0M0IpIFdpbmRvd3NXZWNoYXQoMHg2MzA5MDcxZCkgWFdFQi84NDYxIEZsdWUiLAogICAgICAgICAgICAgICAgICAgICJYLVJlcXVlc3RlZC1XaXRoIjogIlhNTEh0dHBSZXF1ZXN0IiwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB2ZXJpZnk9RmFsc2UsCiAgICAgICAgICAgICkgICMgbGluZTo0NzE6KQogICAgICAgICAgICB0cnk6ICAjIGxpbmU6NDcyOnRyeToKICAgICAgICAgICAgICAgIE9PMDAwMDBPMDAwME9PME9PID0gT08wME9PMDAwT09PT08wMDAuanNvbigpICAjIGxpbmU6NDczOnJlcyA9IHIuanNvbigpCiAgICAgICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICAgICAgT08wMDAwME8wMDAwT08wT08uZ2V0KCJlcnJjb2RlIikgPT0gMAogICAgICAgICAgICAgICAgKTogICMgbGluZTo0NzQ6aWYgcmVzLmdldCgiZXJyY29kZSIpID09IDA6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIGYi4pyFIOi0puWPt1t7T08wMDAwMDAwME9PTzAwTzAubmFtZX1d5o+Q546w5oiQ5YqfIgogICAgICAgICAgICAgICAgICAgICkgICMgbGluZTo0NzU6cHJpbnQoZiLinIUg6LSm5Y+3W3tzZWxmLm5hbWV9XeaPkOeOsOaIkOWKnyIpCiAgICAgICAgICAgICAgICAgICAgT09PMDBPMDBPTzAwT09PT08gPSBmImh0dHA6Ly97T08wMDAwMDAwME9PTzAwTzAuZG9tbmFpbkhvc3R9L3l1bm9ubGluZS92MS93aXRoZHJhdyIgICMgbGluZTo0NzY6dSA9IGYiaHR0cDovL3tzZWxmLmRvbW5haW5Ib3N0fS95dW5vbmxpbmUvdjEvd2l0aGRyYXciCiAgICAgICAgICAgICAgICAgICAgTzAwME8wT09PTzAwMDBPT08gPSBmInVuaW9uaWQ9e08wT08wME8wT08wT08wME9PWyd1bmlvbmlkJ119JnNpZ25pZD17TzBPTzAwTzBPTzBPTzAwT09bJ3JlcXVlc3RfaWQnXX0mdWE9MCZwdHlwZT0wJnBhY2NvdW50PSZwbmFtZT0iICAjIGxpbmU6NDc3OnAgPSBmInVuaW9uaWQ9e2V4Y2hhbmdlUGFyYW1zWyd1bmlvbmlkJ119JnNpZ25pZD17ZXhjaGFuZ2VQYXJhbXNbJ3JlcXVlc3RfaWQnXX0mdWE9MCZwdHlwZT0wJnBhY2NvdW50PSZwbmFtZT0iCiAgICAgICAgICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgICAgICAgICBPTzAwMDAwMDAwT09PMDBPMC5hbGlBY2NvdW50IGFuZCBPTzAwMDAwMDAwT09PMDBPMC5hbGlOYW1lCiAgICAgICAgICAgICAgICAgICAgKTogICMgbGluZTo0Nzg6aWYgc2VsZi5hbGlBY2NvdW50IGFuZCBzZWxmLmFsaU5hbWU6CiAgICAgICAgICAgICAgICAgICAgICAgIE8wMDBPME9PT08wMDAwT09PID0gZiJ1bmlvbmlkPXtPME9PMDBPME9PME9PMDBPT1sndW5pb25pZCddfSZzaWduaWQ9e08wT08wME8wT08wT08wME9PWydyZXF1ZXN0X2lkJ119JnVhPTAmcHR5cGU9MSZwYWNjb3VudD17cXVvdGUoT08wMDAwMDAwME9PTzAwTzAuYWxpQWNjb3VudCl9JnBuYW1lPXtxdW90ZShPTzAwMDAwMDAwT09PMDBPMC5hbGlOYW1lKX0iICAjIGxpbmU6NDc5OnAgPSBmInVuaW9uaWQ9e2V4Y2hhbmdlUGFyYW1zWyd1bmlvbmlkJ119JnNpZ25pZD17ZXhjaGFuZ2VQYXJhbXNbJ3JlcXVlc3RfaWQnXX0mdWE9MCZwdHlwZT0xJnBhY2NvdW50PXtxdW90ZShzZWxmLmFsaUFjY291bnQpfSZwbmFtZT17cXVvdGUoc2VsZi5hbGlOYW1lKX0iCiAgICAgICAgICAgICAgICAgICAgT08wME9PMDAwT09PT08wMDAgPSByZXF1ZXN0cy5wb3N0KAogICAgICAgICAgICAgICAgICAgICAgICBPT08wME8wME9PMDBPT09PTywKICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVycz17CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiQWNjZXB0IjogImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdCwgKi8qOyBxPTAuMDEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIkFjY2VwdC1FbmNvZGluZyI6ICJnemlwLCBkZWZsYXRlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJBY2NlcHQtTGFuZ3VhZ2UiOiAiemgtQ04semg7cT0wLjkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLTgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIkNvb2tpZSI6IGYieXNtdWlkPXtPTzAwMDAwMDAwT09PMDBPMC55c21fdWlkfTsgZWplY3RDb2RlPTEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIkhvc3QiOiBmIntPTzAwMDAwMDAwT09PMDBPMC5kb21uYWluSG9zdH0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIk9yaWdpbiI6IGYiaHR0cDovL3tPTzAwMDAwMDAwT09PMDBPMC5kb21uYWluSG9zdH0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlByb3h5LUNvbm5lY3Rpb24iOiAia2VlcC1hbGl2ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiUmVmZXJlciI6IGYiaHR0cDovL3tPTzAwMDAwMDAwT09PMDBPMC5kb21uYWluSG9zdH0veXVub25saW5lL3YxL2V4Y2hhbmdlP3VuaW9uaWQ9e09PMDAwMDAwMDBPT08wME8wLnVuaW9uSWR9JnJlcXVlc3RfaWQ9e09PMDAwMDAwMDBPT08wME8wLnNpZ25pZH0mcXJjb2RlX251bWJlcj0xNjYwNzg2NDM1ODE0NTU4OCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTA3LjAuMC4wIFNhZmFyaS81MzcuMzYgTmV0VHlwZS9XSUZJIE1pY3JvTWVzc2VuZ2VyLzcuMC4yMC4xNzgxKDB4NjcwMDE0M0IpIFdpbmRvd3NXZWNoYXQoMHg2MzA5MDcxZCkgWFdFQi84NDYxIEZsdWUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlgtUmVxdWVzdGVkLVdpdGgiOiAiWE1MSHR0cFJlcXVlc3QiLAogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhPU8wMDBPME9PT08wMDAwT09PLAogICAgICAgICAgICAgICAgICAgICAgICB2ZXJpZnk9RmFsc2UsCiAgICAgICAgICAgICAgICAgICAgKSAgIyBsaW5lOjQ5NzopCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIGYi6LSm5Y+3W3tPTzAwMDAwMDAwT09PMDBPMC5uYW1lfV3mj5DnjrDnu5PmnpwiLCBPTzAwT08wMDBPT09PTzAwMC5qc29uKCkKICAgICAgICAgICAgICAgICAgICApICAjIGxpbmU6NDk4OnByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeaPkOeOsOe7k+aenCIsIHIuanNvbigpKQogICAgICAgICAgICAgICAgZWxzZTogICMgbGluZTo0OTk6ZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgZiLotKblj7dbe09PMDAwMDAwMDBPT08wME8wLm5hbWV9XeaPkOeOsOWksei0pe+8miIsCiAgICAgICAgICAgICAgICAgICAgICAgIE9PMDBPTzAwME9PT09PMDAwLnRleHQsCiAgICAgICAgICAgICAgICAgICAgICAgICIg5o+Q546w5Zyw5Z2A77yaIiwKICAgICAgICAgICAgICAgICAgICAgICAgTzAwMDAwT08wTzBPTzBPME8sCiAgICAgICAgICAgICAgICAgICAgICAgICIg5o+Q546w5Y+C5pWw77yaIiwKICAgICAgICAgICAgICAgICAgICAgICAgTzAwMDBPME8wME9PMDAwMDAsCiAgICAgICAgICAgICAgICAgICAgKSAgIyBsaW5lOjUwMDpwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV3mj5DnjrDlpLHotKXvvJoiLCByLnRleHQsICIg5o+Q546w5Zyw5Z2A77yaIiwgdTEsICIg5o+Q546w5Y+C5pWw77yaIiwgcDEpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgTzAwMDAwTzAwTzAwTzBPME86ICAjIGxpbmU6NTAxOmV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgIGYi6LSm5Y+3W3tPTzAwMDAwMDAwT09PMDBPMC5uYW1lfV3mj5DnjrDlpLHotKXvvJoiLAogICAgICAgICAgICAgICAgICAgIE9PMDBPTzAwME9PT09PMDAwLnRleHQsCiAgICAgICAgICAgICAgICAgICAgIiDmj5DnjrDlnLDlnYDvvJoiLAogICAgICAgICAgICAgICAgICAgIE8wMDAwME9PME8wT08wTzBPLAogICAgICAgICAgICAgICAgICAgICIg5o+Q546w5Y+C5pWw77yaIiwKICAgICAgICAgICAgICAgICAgICBPMDAwME8wTzAwT08wMDAwMCwKICAgICAgICAgICAgICAgICkgICMgbGluZTo1MDM6cHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d5o+Q546w5aSx6LSl77yaIiwgci50ZXh0LCAiIOaPkOeOsOWcsOWdgO+8miIsIHUxLCAiIOaPkOeOsOWPguaVsO+8miIsIHAxKQoKICAgIGRlZiBpbml0KE8wTzBPMDAwT08wMDAwMDAwKTogICMgbGluZTo1MDU6ZGVmIGluaXQoc2VsZik6CiAgICAgICAgdHJ5OiAgIyBsaW5lOjUwNjp0cnk6CiAgICAgICAgICAgIE8wT09PT09PMDAwT09PT08wID0gcmVxdWVzdHMuZ2V0KAogICAgICAgICAgICAgICAgImh0dHBzOi8vbnNyLnpzZjIwMjNlNDU4LmNsb3VkL3l1bm9ubGluZS92MS9nZXRjaGF0c2l0ZT90PTE3MDkwMTk1NTEmY2lkPTc4NWQ4NzhjYjFlNzZhMzFjYzFiNTIyMjRkOTM1YWI3JmNvZGU9MDgxa3RSRmExVE02MEgwZ3I0R2ExVTZQYzEwa3RSRlgmc3RhdGU9MSIsCiAgICAgICAgICAgICAgICB2ZXJpZnk9RmFsc2UsCiAgICAgICAgICAgICkgICMgbGluZTo1MTA6KQogICAgICAgICAgICBPME8wTzAwME9PMDAwMDAwMC5kb21uYWluSG9zdCA9IE8wT09PT09PMDAwT09PT08wLmpzb24oKVsiZGF0YSJdWwogICAgICAgICAgICAgICAgImx1b2RpIgogICAgICAgICAgICBdLnNwbGl0KCIvIilbCiAgICAgICAgICAgICAgICAyCiAgICAgICAgICAgIF0gICMgbGluZTo1MTE6c2VsZi5kb21uYWluSG9zdCA9IHIuanNvbigpWyJkYXRhIl1bImx1b2RpIl0uc3BsaXQoIi8iKVsyXQogICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgIGYi6LSm5Y+3W3tPME8wTzAwME9PMDAwMDAwMC5uYW1lfV3mj5Dlj5bliLDnmoTln5/lkI3vvJp7TzBPME8wMDBPTzAwMDAwMDAuZG9tbmFpbkhvc3R9IgogICAgICAgICAgICApICAjIGxpbmU6NTEzOnByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeaPkOWPluWIsOeahOWfn+WQje+8mntzZWxmLmRvbW5haW5Ib3N0fSIpCiAgICAgICAgICAgIE8wTzBPMDAwT08wMDAwMDAwLmhlYWRlcnMgPSB7CiAgICAgICAgICAgICAgICAiQ29ubmVjdGlvbiI6ICJrZWVwLWFsaXZlIiwKICAgICAgICAgICAgICAgICJBY2NlcHQiOiAiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0LCAqLyo7IHE9MC4wMSIsCiAgICAgICAgICAgICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTA3LjAuMC4wIFNhZmFyaS81MzcuMzYgTmV0VHlwZS9XSUZJIE1pY3JvTWVzc2VuZ2VyLzcuMC4yMC4xNzgxKDB4NjcwMDE0M0IpIFdpbmRvd3NXZWNoYXQoMHg2MzA5MDYyMSkgWFdFQi84MzUxIEZsdWUiLAogICAgICAgICAgICAgICAgIlgtUmVxdWVzdGVkLVdpdGgiOiAiWE1MSHR0cFJlcXVlc3QiLAogICAgICAgICAgICAgICAgIlJlZmVyZXIiOiBmImh0dHA6Ly97TzBPME8wMDBPTzAwMDAwMDAuZG9tbmFpbkhvc3R9LyIsCiAgICAgICAgICAgICAgICAiT3JpZ2luIjogZiJodHRwOi8ve08wTzBPMDAwT08wMDAwMDAwLmRvbW5haW5Ib3N0fSIsCiAgICAgICAgICAgICAgICAiQWNjZXB0LUVuY29kaW5nIjogImd6aXAsIGRlZmxhdGUiLAogICAgICAgICAgICAgICAgIkFjY2VwdC1MYW5ndWFnZSI6ICJ6aC1DTix6aCIsCiAgICAgICAgICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOCIsCiAgICAgICAgICAgICAgICAiQ29va2llIjogZiJ5c21fdWlkPXtPME8wTzAwME9PMDAwMDAwMC55c21fdWlkfTsiLAogICAgICAgICAgICB9ICAjIGxpbmU6NTI2On0KICAgICAgICAgICAgTzBPME8wMDBPTzAwMDAwMDAuc2lnbmlkID0gIiIgICMgbGluZTo1Mjg6c2VsZi5zaWduaWQgPSAiIgogICAgICAgICAgICBmb3IgT08wTzBPTzBPT09PME9PMDAgaW4gcmFuZ2UoMTApOiAgIyBsaW5lOjUyOTpmb3IgaSBpbiByYW5nZSgxMCk6CiAgICAgICAgICAgICAgICBPME9PT09PTzAwME9PT09PMCA9IHJlcXVlc3RzLmdldCgKICAgICAgICAgICAgICAgICAgICBmImh0dHA6Ly97TzBPME8wMDBPTzAwMDAwMDAuZG9tbmFpbkhvc3R9LyIsCiAgICAgICAgICAgICAgICAgICAgaGVhZGVycz17CiAgICAgICAgICAgICAgICAgICAgICAgICJVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzIjogIjEiLAogICAgICAgICAgICAgICAgICAgICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTA3LjAuMC4wIFNhZmFyaS81MzcuMzYgTmV0VHlwZS9XSUZJIE1pY3JvTWVzc2VuZ2VyLzcuMC4yMC4xNzgxKDB4NjcwMDE0M0IpIFdpbmRvd3NXZWNoYXQoMHg2MzA5MDcxZCkgWFdFQi84NDYxIEZsdWUiLAogICAgICAgICAgICAgICAgICAgICAgICAiQWNjZXB0IjogInRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJBY2NlcHQtRW5jb2RpbmciOiAiZ3ppcCwgZGVmbGF0ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJBY2NlcHQtTGFuZ3VhZ2UiOiAiemgtQ04semg7cT0wLjkiLAogICAgICAgICAgICAgICAgICAgICAgICAiQ29va2llIjogZiJ5c211aWQ9e08wTzBPMDAwT08wMDAwMDAwLnlzbV91aWR9IiwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHZlcmlmeT1GYWxzZSwKICAgICAgICAgICAgICAgICkgICMgbGluZTo1NDE6KQogICAgICAgICAgICAgICAgT08wT09PMDAwT09PMDAwTzAgPSBPME9PT09PTzAwME9PT09PMC50ZXh0ICAjIGxpbmU6NTQyOmh0bWx0ZXh0ID0gci50ZXh0CiAgICAgICAgICAgICAgICBPME9PT09PTzAwME9PME9PTyA9IHJlLnN1YigKICAgICAgICAgICAgICAgICAgICAiXHMiLCAiIiwgT08wT09PMDAwT09PMDAwTzAKICAgICAgICAgICAgICAgICkgICMgbGluZTo1NDM6cmVzMSA9IHJlLnN1YigiXHMiLCAiIiwgaHRtbHRleHQpCiAgICAgICAgICAgICAgICBPT08wT08wTzAwT08wMDBPMCA9IHJlLmZpbmRhbGwoCiAgICAgICAgICAgICAgICAgICAgJ1wpXHxcfCIoLio/KSI7JywgTzBPT09PT08wMDBPTzBPT08KICAgICAgICAgICAgICAgICkgICMgbGluZTo1NDQ6c2lnbmlkbCA9IHJlLmZpbmRhbGwoJ1wpXHxcfCIoLio/KSI7JywgcmVzMSkKICAgICAgICAgICAgICAgIGlmIE9PTzBPTzBPMDBPTzAwME8wID09IFtdOiAgIyBsaW5lOjU0NjppZiBzaWduaWRsID09IFtdOgogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlICAjIGxpbmU6NTQ3OmNvbnRpbnVlCiAgICAgICAgICAgICAgICBlbHNlOiAgIyBsaW5lOjU0ODplbHNlOgogICAgICAgICAgICAgICAgICAgIE8wTzBPMDAwT08wMDAwMDAwLnNpZ25pZCA9IE9PTzBPTzBPMDBPTzAwME8wWwogICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgXSAgIyBsaW5lOjU0OTpzZWxmLnNpZ25pZCA9IHNpZ25pZGxbMF0KICAgICAgICAgICAgICAgICAgICBicmVhayAgIyBsaW5lOjU1MDpicmVhawogICAgICAgICAgICBpZiBPME8wTzAwME9PMDAwMDAwMC5zaWduaWQgPT0gIiI6ICAjIGxpbmU6NTUxOmlmIHNlbGYuc2lnbmlkID09ICIiOgogICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgZiLotKblj7dbe08wTzBPMDAwT08wMDAwMDAwLm5hbWV9XeWIneWni+WMliByZXF1ZXN0SWQg5aSx6LSlLOi0puWPt+W8guW4uCIKICAgICAgICAgICAgICAgICkgICMgbGluZTo1NTI6cHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d5Yid5aeL5YyWIHJlcXVlc3RJZCDlpLHotKUs6LSm5Y+35byC5bi4IikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZSAgIyBsaW5lOjU1MzpyZXR1cm4gRmFsc2UKICAgICAgICAgICAgTzBPT09PT08wMDBPT09PTzAgPSByZXF1ZXN0cy5nZXQoCiAgICAgICAgICAgICAgICBmImh0dHA6Ly97TzBPME8wMDBPTzAwMDAwMDAuZG9tbmFpbkhvc3R9Lz9jYXRlPTAiLAogICAgICAgICAgICAgICAgaGVhZGVycz17CiAgICAgICAgICAgICAgICAgICAgIlVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHMiOiAiMSIsCiAgICAgICAgICAgICAgICAgICAgIlVzZXItQWdlbnQiOiAiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEwNy4wLjAuMCBTYWZhcmkvNTM3LjM2IE5ldFR5cGUvV0lGSSBNaWNyb01lc3Nlbmdlci83LjAuMjAuMTc4MSgweDY3MDAxNDNCKSBXaW5kb3dzV2VjaGF0KDB4NjMwOTA3MWQpIFhXRUIvODQ2MSBGbHVlIiwKICAgICAgICAgICAgICAgICAgICAiQWNjZXB0IjogInRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOSIsCiAgICAgICAgICAgICAgICAgICAgIkFjY2VwdC1FbmNvZGluZyI6ICJnemlwLCBkZWZsYXRlIiwKICAgICAgICAgICAgICAgICAgICAiQWNjZXB0LUxhbmd1YWdlIjogInpoLUNOLHpoO3E9MC45IiwKICAgICAgICAgICAgICAgICAgICAiQ29va2llIjogZiJ5c211aWQ9e08wTzBPMDAwT08wMDAwMDAwLnlzbV91aWR9IiwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB2ZXJpZnk9RmFsc2UsCiAgICAgICAgICAgICkgICMgbGluZTo1NjY6KQogICAgICAgICAgICBPTzBPT08wMDBPT08wMDBPMCA9IE8wT09PT09PMDAwT09PT08wLnRleHQgICMgbGluZTo1Njc6aHRtbHRleHQgPSByLnRleHQKICAgICAgICAgICAgTzBPT09PT08wMDBPTzBPT08gPSByZS5zdWIoCiAgICAgICAgICAgICAgICAiXHMiLCAiIiwgT08wT09PMDAwT09PMDAwTzAKICAgICAgICAgICAgKSAgIyBsaW5lOjU2ODpyZXMxID0gcmUuc3ViKCJccyIsICIiLCBodG1sdGV4dCkKICAgICAgICAgICAgT09PME9PME8wME9PMDAwTzAgPSByZS5maW5kYWxsKAogICAgICAgICAgICAgICAgJy95dW5vbmxpbmUvdjEvZXhjaGFuZ2UoLio/KSInLCBPME9PT09PTzAwME9PME9PTwogICAgICAgICAgICApICAjIGxpbmU6NTY5OnNpZ25pZGwgPSByZS5maW5kYWxsKCcveXVub25saW5lL3YxL2V4Y2hhbmdlKC4qPykiJywgcmVzMSkKICAgICAgICAgICAgaWYgT09PME9PME8wME9PMDAwTzAgPT0gW106ICAjIGxpbmU6NTcxOmlmIHNpZ25pZGwgPT0gW106CiAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICBmIui0puWPt1t7TzBPME8wMDBPTzAwMDAwMDAubmFtZX1d5Yid5aeL5YyWIOaPkOeOsOWPguaVsCDlpLHotKUs6LSm5Y+35byC5bi4IgogICAgICAgICAgICAgICAgKSAgIyBsaW5lOjU3MjpwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV3liJ3lp4vljJYg5o+Q546w5Y+C5pWwIOWksei0pSzotKblj7flvILluLgiKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlICAjIGxpbmU6NTczOnJldHVybiBGYWxzZQogICAgICAgICAgICBlbHNlOiAgIyBsaW5lOjU3NDplbHNlOgogICAgICAgICAgICAgICAgTzBPME8wMDBPTzAwMDAwMDAuZXhjaGFuZ2VQYXJhbXMgPSBPT08wT08wTzAwT08wMDBPMFsKICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICBdICAjIGxpbmU6NTc1OnNlbGYuZXhjaGFuZ2VQYXJhbXMgPSBzaWduaWRsWzBdCiAgICAgICAgICAgIHJldHVybiBUcnVlICAjIGxpbmU6NTc2OnJldHVybiBUcnVlCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBPME8wMDBPMDBPT09PME8wTzogICMgbGluZTo1Nzc6ZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgIGYi6LSm5Y+3W3tPME8wTzAwME9PMDAwMDAwMC5uYW1lfV3liJ3lp4vljJblpLHotKUs6K+35qOA5p+l5L2g55qEY2siCiAgICAgICAgICAgICkgICMgbGluZTo1Nzk6cHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d5Yid5aeL5YyW5aSx6LSlLOivt+ajgOafpeS9oOeahGNrIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlICAjIGxpbmU6NTgwOnJldHVybiBGYWxzZQoKICAgIGRlZiBydW4oTzAwTzAwME9PTzAwTzAwMDApOiAgIyBsaW5lOjU4MjpkZWYgcnVuKHNlbGYpOgogICAgICAgIGlmIE8wME8wMDBPT08wME8wMDAwLmluaXQoKTogICMgbGluZTo1ODM6aWYgc2VsZi5pbml0KCk6CiAgICAgICAgICAgIE8wME8wMDBPT08wME8wMDAwLnVzZXJfaW5mbygpICAjIGxpbmU6NTg0OnNlbGYudXNlcl9pbmZvKCkKICAgICAgICAgICAgTzAwTzAwME9PTzAwTzAwMDAuaGFzV2VjaGF0KCkgICMgbGluZTo1ODU6c2VsZi5oYXNXZWNoYXQoKQogICAgICAgICAgICBPMDBPMDAwT09PMDBPMDAwMC5nb2xkKCkgICMgbGluZTo1ODY6c2VsZi5nb2xkKCkKICAgICAgICAgICAgTzAwTzAwME9PTzAwTzAwMDAucmVhZCgpICAjIGxpbmU6NTg3OnNlbGYucmVhZCgpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykgICMgbGluZTo1ODg6dGltZS5zbGVlcCgzKQogICAgICAgICAgICBPMDBPMDAwT09PMDBPMDAwMC5nb2xkKCkgICMgbGluZTo1ODk6c2VsZi5nb2xkKCkKICAgICAgICAgICAgdGltZS5zbGVlcCgzKSAgIyBsaW5lOjU5MDp0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIE8wME8wMDBPT08wME8wMDAwLndpdGhkcmF3KCkgICMgbGluZTo1OTE6c2VsZi53aXRoZHJhdygpCgoKZGVmIGdldE5ld0ludml0ZVVybCgpOiAgIyBsaW5lOjU5NDpkZWYgZ2V0TmV3SW52aXRlVXJsKCk6CiAgICBPTzBPT08wMDAwME9PMDAwTyA9IHJlcXVlc3RzLmdldCgKICAgICAgICAiaHR0cHM6Ly93d3cuZmlsZXNtZWouY24vd2FpZG9tYWluLnBocCIsIHZlcmlmeT1GYWxzZQogICAgKS5qc29uKCkgICMgbGluZTo1OTU6ciA9IHJlcXVlc3RzLmdldCgiaHR0cHM6Ly93d3cuZmlsZXNtZWouY24vd2FpZG9tYWluLnBocCIsIHZlcmlmeT1GYWxzZSkuanNvbigpCiAgICBpZiBPTzBPT08wMDAwME9PMDAwTy5nZXQoImNvZGUiKSA9PSAwOiAgIyBsaW5lOjU5NjppZiByLmdldCgiY29kZSIpID09IDA6CiAgICAgICAgTzAwMDAwT08wME8wT08wMDAgPSBPTzBPT08wMDAwME9PMDAwTy5nZXQoImRhdGEiKS5nZXQoCiAgICAgICAgICAgICJsdW9kaSIKICAgICAgICApICAjIGxpbmU6NTk3Om5ld0VudHJ5VXJsID0gci5nZXQoImRhdGEiKS5nZXQoImx1b2RpIikKICAgICAgICBPMDAwMDBPTzBPMDAwT08wMCA9IHVybHBhcnNlKAogICAgICAgICAgICBPMDAwMDBPTzAwTzBPTzAwMAogICAgICAgICkgICMgbGluZTo1OTg6cGFyc2VkX3VybCA9IHVybHBhcnNlKG5ld0VudHJ5VXJsKQogICAgICAgIE8wT08wTzBPMDBPT09PT08wID0gKAogICAgICAgICAgICBPMDAwMDBPTzBPMDAwT08wMC5ob3N0bmFtZQogICAgICAgICkgICMgbGluZTo1OTk6aG9zdCA9IHBhcnNlZF91cmwuaG9zdG5hbWUKICAgICAgICByZXR1cm4gZiJodHRwczovL3U3ZHMuc3k2NzMuc2hvcC95dW5vbmxpbmUvdjEvYXV0aC8yNjM5YmI5NWRhYmExZDk5ZTUzMzhhOGMyZTIxZTJmMD9jb2RldXJsPXU3ZHMuc3k2NzMuc2hvcCZjb2RldXNlcmlkPTImdGltZT0xNzA5MDIxMTc2Ii5yZXBsYWNlKAogICAgICAgICAgICAidTdkcy5zeTY3My5zaG9wIiwgTzBPTzBPME8wME9PT09PTzAgb3IgInU3ZHMuc3k2NzMuc2hvcCIKICAgICAgICApICAjIGxpbmU6NjAyOikKICAgIGVsc2U6ICAjIGxpbmU6NjAzOmVsc2U6CiAgICAgICAgcmV0dXJuICJodHRwczovL3U3ZHMuc3k2NzMuc2hvcC95dW5vbmxpbmUvdjEvYXV0aC8yNjM5YmI5NWRhYmExZDk5ZTUzMzhhOGMyZTIxZTJmMD9jb2RldXJsPXU3ZHMuc3k2NzMuc2hvcCZjb2RldXNlcmlkPTImdGltZT0xNzA5MDIxMTc2IiAgIyBsaW5lOjYwNDpyZXR1cm4gImh0dHBzOi8vdTdkcy5zeTY3My5zaG9wL3l1bm9ubGluZS92MS9hdXRoLzI2MzliYjk1ZGFiYTFkOTllNTMzOGE4YzJlMjFlMmYwP2NvZGV1cmw9dTdkcy5zeTY3My5zaG9wJmNvZGV1c2VyaWQ9MiZ0aW1lPTE3MDkwMjExNzYiCgoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjogICMgbGluZTo2MDc6aWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIGFjY291bnRzID0gb3MuZ2V0ZW52KCJ4eXl5ZCIpICAjIGxpbmU6NjExOmFjY291bnRzID0gb3MuZ2V0ZW52KCJ4eXl5ZCIpCiAgICBpbnZpdGVVcmwgPSBnZXROZXdJbnZpdGVVcmwoKSAgIyBsaW5lOjYxMjppbnZpdGVVcmwgPSBnZXROZXdJbnZpdGVVcmwoKQogICAgaWYgYWNjb3VudHMgaXMgTm9uZTogICMgbGluZTo2MTM6aWYgYWNjb3VudHMgaXMgTm9uZToKICAgICAgICBwcmludCgKICAgICAgICAgICAgZiLkvaDmsqHmnInloavlhaV4eXl5ZO+8jOWSi+i/kOihjO+8n1xu6LWw5LiL6YKA6K+35ZGX77yae2ludml0ZVVybH0iCiAgICAgICAgKSAgIyBsaW5lOjYxNDpwcmludChmIuS9oOayoeacieWhq+WFpXh5eXlk77yM5ZKL6L+Q6KGM77yfXG7otbDkuIvpgoDor7flkZfvvJp7aW52aXRlVXJsfSIpCiAgICBlbHNlOiAgIyBsaW5lOjYxNTplbHNlOgogICAgICAgIGFjY291bnRzX2xpc3QgPSBvcy5lbnZpcm9uLmdldCgieHl5eWQiKS5zcGxpdCgKICAgICAgICAgICAgIiYiCiAgICAgICAgKSAgIyBsaW5lOjYxNzphY2NvdW50c19saXN0ID0gb3MuZW52aXJvbi5nZXQoInh5eXlkIikuc3BsaXQoIiYiKQogICAgICAgIG51bV9vZl9hY2NvdW50cyA9IGxlbigKICAgICAgICAgICAgYWNjb3VudHNfbGlzdAogICAgICAgICkgICMgbGluZTo2MjA6bnVtX29mX2FjY291bnRzID0gbGVuKGFjY291bnRzX2xpc3QpCiAgICAgICAgcHJpbnQoCiAgICAgICAgICAgIGYi5b2T5YmN6ISa5pys54mI5pys77ya5bm755Sf6a2U5pS56Ieq55So54mIIFYxLjMyIFxu5bm755Sf5o+Q56S677ya6I635Y+W5YiwIHtudW1fb2ZfYWNjb3VudHN9IOS4qui0puWPt1xu5rOo5YaM5Zyw5Z2A77yae2ludml0ZVVybH0iCiAgICAgICAgKSAgIyBsaW5lOjYyMzopCiAgICAgICAgZm9yIGksIGFjY291bnQgaW4gZW51bWVyYXRlKAogICAgICAgICAgICBhY2NvdW50c19saXN0LCBzdGFydD0xCiAgICAgICAgKTogICMgbGluZTo2MjY6Zm9yIGksIGFjY291bnQgaW4gZW51bWVyYXRlKGFjY291bnRzX2xpc3QsIHN0YXJ0PTEpOgogICAgICAgICAgICBwcmludCgiLSIgKiA1MCkgICMgbGluZTo2Mjg6cHJpbnQoIi0iICogNTApCiAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgZiLotKblj7dbe2FjY291bnQuc3BsaXQoJyMnKVswXX1d5byA5aeL5omn6KGM5Lu75YqhID4+PiIKICAgICAgICAgICAgKSAgIyBsaW5lOjYyOTpwcmludChmIui0puWPt1t7YWNjb3VudC5zcGxpdCgnIycpWzBdfV3lvIDlp4vmiafooYzku7vliqEgPj4+IikKICAgICAgICAgICAgdmFsdWVzID0gYWNjb3VudC5zcGxpdCgiIyIpICAjIGxpbmU6NjMyOnZhbHVlcyA9IGFjY291bnQuc3BsaXQoIiMiKQogICAgICAgICAgICBjZyA9IHt9ICAjIGxpbmU6NjM0OmNnID0ge30KICAgICAgICAgICAgdHJ5OiAgIyBsaW5lOjYzNTp0cnk6CiAgICAgICAgICAgICAgICBpZiBsZW4odmFsdWVzKSA9PSAzOiAgIyBsaW5lOjYzNjppZiBsZW4odmFsdWVzKSA9PSAzOgogICAgICAgICAgICAgICAgICAgIGNnID0gewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6IHZhbHVlc1swXSwKICAgICAgICAgICAgICAgICAgICAgICAgInlzbV91aWQiOiB2YWx1ZXNbMV0sCiAgICAgICAgICAgICAgICAgICAgICAgICJ1bmlvbklkIjogdmFsdWVzWzJdLAogICAgICAgICAgICAgICAgICAgICAgICAidHhieiI6IDMwMDAsCiAgICAgICAgICAgICAgICAgICAgICAgICJhbGlBY2NvdW50IjogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhbGlOYW1lIjogIiIsCiAgICAgICAgICAgICAgICAgICAgfSAgIyBsaW5lOjY0NDp9CiAgICAgICAgICAgICAgICBlbHNlOiAgIyBsaW5lOjY0NTplbHNlOgogICAgICAgICAgICAgICAgICAgIGNnID0gewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6IHZhbHVlc1swXSwKICAgICAgICAgICAgICAgICAgICAgICAgInlzbV91aWQiOiB2YWx1ZXNbMV0sCiAgICAgICAgICAgICAgICAgICAgICAgICJ1bmlvbklkIjogdmFsdWVzWzJdLAogICAgICAgICAgICAgICAgICAgICAgICAidHhieiI6IHZhbHVlc1szXSBvciAzMDAwLAogICAgICAgICAgICAgICAgICAgICAgICAiYWxpQWNjb3VudCI6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICAiYWxpTmFtZSI6ICIiLAogICAgICAgICAgICAgICAgICAgIH0gICMgbGluZTo2NTM6fQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6ICAjIGxpbmU6NjU0OmV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICLlubvnlJ/pgLzpgLzlj6g6IiwgIumFjee9rueahOWVpeeOqeaEj++8jOe8uuWPguaVsOS6huaGqOaJue+8jOeci+a4heiEmuacrOivtOaYju+8gSIKICAgICAgICAgICAgICAgICkgICMgbGluZTo2NTY6cHJpbnQoIuW5u+eUn+mAvOmAvOWPqDoiLCAi6YWN572u55qE5ZWl546p5oSP77yM57y65Y+C5pWw5LqG5oao5om577yM55yL5riF6ISa5pys6K+05piO77yBIikKICAgICAgICAgICAgICAgIGNvbnRpbnVlICAjIGxpbmU6NjU3OmNvbnRpbnVlCiAgICAgICAgICAgIGNnWyJhcHBUb2tlbiJdID0gIiIgICMgbGluZTo2NTg6Y2dbImFwcFRva2VuIl0gPSAiIgogICAgICAgICAgICBpZiBsZW4odmFsdWVzKSA+PSA1OiAgIyBsaW5lOjY2MDppZiBsZW4odmFsdWVzKSA+PSA1OgogICAgICAgICAgICAgICAgaWYgdmFsdWVzWzRdOiAgIyBsaW5lOjY2MTppZiB2YWx1ZXNbNF06CiAgICAgICAgICAgICAgICAgICAgY2dbImFwcFRva2VuIl0gPSB2YWx1ZXNbNF0gICMgbGluZTo2NjI6Y2dbImFwcFRva2VuIl0gPSB2YWx1ZXNbNF0KICAgICAgICAgICAgZWxzZTogICMgbGluZTo2NjM6ZWxzZToKICAgICAgICAgICAgICAgIGNnWwogICAgICAgICAgICAgICAgICAgICJhcHBUb2tlbiIKICAgICAgICAgICAgICAgIF0gPSB3eHB1c2hlckFwcFRva2VuICAjIGxpbmU6NjY0OmNnWyJhcHBUb2tlbiJdID0gd3hwdXNoZXJBcHBUb2tlbgogICAgICAgICAgICBjZ1sidG9waWNJZHMiXSA9ICIiICAjIGxpbmU6NjY1OmNnWyJ0b3BpY0lkcyJdID0gIiIKICAgICAgICAgICAgaWYgbGVuKHZhbHVlcykgPj0gNjogICMgbGluZTo2NjY6aWYgbGVuKHZhbHVlcykgPj0gNjoKICAgICAgICAgICAgICAgIGlmIHZhbHVlc1s1XTogICMgbGluZTo2Njc6aWYgdmFsdWVzWzVdOgogICAgICAgICAgICAgICAgICAgIGNnWyJ0b3BpY0lkcyJdID0gdmFsdWVzWzVdICAjIGxpbmU6NjY4OmNnWyJ0b3BpY0lkcyJdID0gdmFsdWVzWzVdCiAgICAgICAgICAgIGVsc2U6ICAjIGxpbmU6NjY5OmVsc2U6CiAgICAgICAgICAgICAgICBjZ1sKICAgICAgICAgICAgICAgICAgICAidG9waWNJZHMiCiAgICAgICAgICAgICAgICBdID0gd3hwdXNoZXJUb3BpY0lkICAjIGxpbmU6NjcwOmNnWyJ0b3BpY0lkcyJdID0gd3hwdXNoZXJUb3BpY0lkCiAgICAgICAgICAgIGlmIGxlbih2YWx1ZXMpID49IDc6ICAjIGxpbmU6NjcxOmlmIGxlbih2YWx1ZXMpID49IDc6CiAgICAgICAgICAgICAgICBpZiB2YWx1ZXNbNl06ICAjIGxpbmU6NjcyOmlmIHZhbHVlc1s2XToKICAgICAgICAgICAgICAgICAgICBjZ1siYWxpTmFtZSJdID0gdmFsdWVzWzZdICAjIGxpbmU6NjczOmNnWyJhbGlOYW1lIl0gPSB2YWx1ZXNbNl0KICAgICAgICAgICAgaWYgbGVuKHZhbHVlcykgPj0gODogICMgbGluZTo2NzQ6aWYgbGVuKHZhbHVlcykgPj0gODoKICAgICAgICAgICAgICAgIGlmIHZhbHVlc1s3XTogICMgbGluZTo2NzU6aWYgdmFsdWVzWzddOgogICAgICAgICAgICAgICAgICAgIGNnWyJhbGlBY2NvdW50Il0gPSB2YWx1ZXNbCiAgICAgICAgICAgICAgICAgICAgICAgIDcKICAgICAgICAgICAgICAgICAgICBdICAjIGxpbmU6Njc2OmNnWyJhbGlBY2NvdW50Il0gPSB2YWx1ZXNbN10KICAgICAgICAgICAgdHJ5OiAgIyBsaW5lOjY3Nzp0cnk6CiAgICAgICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICAgICAgY2dbImFwcFRva2VuIl0uc3RhcnRzd2l0aCgiQVRfIikgPT0gRmFsc2UKICAgICAgICAgICAgICAgICk6ICAjIGxpbmU6Njc4OmlmIGNnWyJhcHBUb2tlbiJdLnN0YXJ0c3dpdGgoIkFUXyIpID09IEZhbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICAgICBmIuW5u+eUn+aPkOekuu+8jOi0puWPt1t7YWNjb3VudC5zcGxpdCgnIycpWzBdfV0gd3hwdXNoIOmFjee9rumUmeivr++8jOW/q+S7lOe7hueci+WktOmDqOivtOaYju+8gSIKICAgICAgICAgICAgICAgICAgICApICAjIGxpbmU6Njc5OnByaW50KGYi5bm755Sf5o+Q56S677yM6LSm5Y+3W3thY2NvdW50LnNwbGl0KCcjJylbMF19XSB3eHB1c2gg6YWN572u6ZSZ6K+v77yM5b+r5LuU57uG55yL5aS06YOo6K+05piO77yBIikKICAgICAgICAgICAgICAgICAgICBjb250aW51ZSAgIyBsaW5lOjY4MDpjb250aW51ZQogICAgICAgICAgICAgICAgaWYgKGNnWyJhcHBUb2tlbiJdLnN0YXJ0c3dpdGgoIkFUXyIpID09IEZhbHNlKSBvciAoCiAgICAgICAgICAgICAgICAgICAgY2dbInRvcGljSWRzIl0uaXNkaWdpdCgpID09IEZhbHNlCiAgICAgICAgICAgICAgICApOiAgIyBsaW5lOjY4MzopOgogICAgICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICAgICBmIuW5u+eUn+aPkOekuu+8jOi0puWPt1t7YWNjb3VudC5zcGxpdCgnIycpWzBdfV0gd3hwdXNoIOmFjee9rumUmeivr++8jOW/q+S7lOe7hueci+WktOmDqOivtOaYju+8gSIKICAgICAgICAgICAgICAgICAgICApICAjIGxpbmU6Njg0OnByaW50KGYi5bm755Sf5o+Q56S677yM6LSm5Y+3W3thY2NvdW50LnNwbGl0KCcjJylbMF19XSB3eHB1c2gg6YWN572u6ZSZ6K+v77yM5b+r5LuU57uG55yL5aS06YOo6K+05piO77yBIikKICAgICAgICAgICAgICAgICAgICBjb250aW51ZSAgIyBsaW5lOjY4NTpjb250aW51ZQogICAgICAgICAgICAgICAgYXBpID0gSEhZRChjZykgICMgbGluZTo2ODY6YXBpID0gSEhZRChjZykKICAgICAgICAgICAgICAgIGlmICgKICAgICAgICAgICAgICAgICAgICBjZ1siYWxpTmFtZSJdIGFuZCBjZ1siYWxpQWNjb3VudCJdCiAgICAgICAgICAgICAgICApOiAgIyBsaW5lOjY4NzppZiBjZ1siYWxpTmFtZSJdIGFuZCBjZ1siYWxpQWNjb3VudCJdOgogICAgICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICAgICBmIuW5u+eUn+aPkOekuu+8jOi0puWPt1t7YWNjb3VudC5zcGxpdCgnIycpWzBdfV0g6YeH55So5LqGIOaUr+S7mOWuneaPkOeOsO+8jOWnk+WQje+8mntjZ1snYWxpTmFtZSddfe+8jOi0puaIt++8mntjZ1snYWxpQWNjb3VudCddfSIKICAgICAgICAgICAgICAgICAgICApICAjIGxpbmU6NjkwOikKICAgICAgICAgICAgICAgIGVsc2U6ICAjIGxpbmU6NjkxOmVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIGYi5bm755Sf5o+Q56S677yM6LSm5Y+3W3thY2NvdW50LnNwbGl0KCcjJylbMF19XSDph4fnlKjkuoYg5b6u5L+h5o+Q546wIgogICAgICAgICAgICAgICAgICAgICkgICMgbGluZTo2OTI6cHJpbnQoZiLlubvnlJ/mj5DnpLrvvIzotKblj7dbe2FjY291bnQuc3BsaXQoJyMnKVswXX1dIOmHh+eUqOS6hiDlvq7kv6Hmj5DnjrAiKQogICAgICAgICAgICAgICAgYXBpLnJ1bigpICAjIGxpbmU6NjkzOmFwaS5ydW4oKQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6ICAjIGxpbmU6Njk0OmV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIGlmICJFeHBlY3RpbmcgdmFsdWU6IGxpbmUgMSBjb2x1bW4gMSIgaW4gc3RyKAogICAgICAgICAgICAgICAgICAgIGUKICAgICAgICAgICAgICAgICk6ICAjIGxpbmU6Njk1OmlmICJFeHBlY3RpbmcgdmFsdWU6IGxpbmUgMSBjb2x1bW4gMSIgaW4gc3RyKGUpOgogICAgICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICAgICBmIuW5u+eUn+aPkOekuu+8jOi0puWPt1t7YWNjb3VudC5zcGxpdCgnIycpWzBdfV0g55aR5Ly8IHVuaW9uSWTlh7rplJnvvIzmjaLkuIDkuKrlkKfvvIEiCiAgICAgICAgICAgICAgICAgICAgKSAgIyBsaW5lOjY5NjpwcmludChmIuW5u+eUn+aPkOekuu+8jOi0puWPt1t7YWNjb3VudC5zcGxpdCgnIycpWzBdfV0g55aR5Ly8IHVuaW9uSWTlh7rplJnvvIzmjaLkuIDkuKrlkKfvvIEiKQogICAgICAgICAgICAgICAgZWxpZiAibGluaycgaXMgbm90IGRlZmluZWQiIGluIHN0cigKICAgICAgICAgICAgICAgICAgICBlCiAgICAgICAgICAgICAgICApOiAgIyBsaW5lOjY5NzplbGlmICJsaW5rJyBpcyBub3QgZGVmaW5lZCIgaW4gc3RyKGUpOgogICAgICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICAgICBmIuW5u+eUn+aPkOekuu+8jOi0puWPt1t7YWNjb3VudC5zcGxpdCgnIycpWzBdfV0g55aR5Ly8IOaWsOWPt+eahOafkOenjeWOn+WboOWvvOiHtOeahOaXoOazlemYheivu++8jOivt+aJi+WKqOmYheivu+S4pOevh+WGjeivleivleWQp++8gSIKICAgICAgICAgICAgICAgICAgICApICAjIGxpbmU6NzAwOikKICAgICAgICAgICAgICAgIGVsc2U6ICAjIGxpbmU6NzAxOmVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIGYi5bm755Sf5o+Q56S677yM6LSm5Y+3W3thY2NvdW50LnNwbGl0KCcjJylbMF19XSDlh7rplJnllabvvIzor7flsIbkuIvpnaLmiqXplJnmiKrlm77lj5HliLB0Z+S6pOa1gee+pDoiCiAgICAgICAgICAgICAgICAgICAgKSAgIyBsaW5lOjcwMjpwcmludChmIuW5u+eUn+aPkOekuu+8jOi0puWPt1t7YWNjb3VudC5zcGxpdCgnIycpWzBdfV0g5Ye66ZSZ5ZWm77yM6K+35bCG5LiL6Z2i5oql6ZSZ5oiq5Zu+5Y+R5YiwdGfkuqTmtYHnvqQ6IikKICAgICAgICAgICAgICAgIHJhaXNlIGUgICMgbGluZTo3MDM6cmFpc2UgZQogICAgICAgICAgICAgICAgY29udGludWUgICMgbGluZTo3MDQ6Y29udGludWUKICAgICAgICAgICAgcHJpbnQoIi0iICogNTApICAjIGxpbmU6NzA2OnByaW50KCItIiAqIDUwKQogICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgIGYi6LSm5Y+3W3thY2NvdW50LnNwbGl0KCcjJylbMF19XeaJp+ihjOS7u+WKoeWujOavle+8gSIKICAgICAgICAgICAgKSAgIyBsaW5lOjcwNzpwcmludChmIui0puWPt1t7YWNjb3VudC5zcGxpdCgnIycpWzBdfV3miafooYzku7vliqHlrozmr5XvvIEiKQo='))
except Exception as e:
    print('脚本执行出错:', str(e))
