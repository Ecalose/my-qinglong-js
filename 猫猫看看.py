# -*- coding: utf-8 -*-
#!/usr/bin/env python3
"""
* 仅供学习交流，请在下载后的24小时内完全删除 请勿将任何内容用于商业或非法目的，否则后果自负。
* 猫猫看看 V1.44

* 活动入口,微信打开：
* 如果连接过期了运行一下就出来了最新的入口！
* https://s1i6.1obg.shop/haobaobao/auth/58487f291985c5f32c16b3b01b96a912
* 打开活动入口，抓包的任意接口cookies中的Cookie参数
* 
* 变量格式：
* 新建同名环境变量
* 变量名：mykkyd
* 变量值：
* # 3000 代表 3毛，后面两个推送参数可不填，那就必须配置全局推送！
* 账号备注#Cookie参数#提现金额如3000#wxpushApptoken#wxpushTopicId
* 
* 其他参数说明（脚本最下方填写参数）
* wxpusher全局参数：wxpusherAppToken、wxpusherTopicId
* 具体使用方法请看文档地址：https://wxpusher.zjiecode.com/docs/#/
* 
* 也可使用 微信机器人：wechatBussinessKey
* 
* 支持支付宝提现：账号备注#Cookie参数#提现金额如3000#wxpushApptoken#wxpushTopicId#支付宝姓名#支付宝账号
* 只想提现支付宝，不想填写其他参数，最少的参数就是：账号备注#Cookie参数###支付宝姓名#支付宝账号
*
* 增加 自定义检测文章等待时间：mykkydReadPostDelay，默认值是 15-20秒
* 定时运行每半小时一次
* 达到标准自动提现
* 达到标准，自动提现
"""
# This file requires Python 3.x and the following dependencies:
# - base64
try:
    import base64
    exec(base64.b64decode('IiIiCiog5LuF5L6b5a2m5Lmg5Lqk5rWB77yM6K+35Zyo5LiL6L295ZCO55qEMjTlsI/ml7blhoXlrozlhajliKDpmaQg6K+35Yu/5bCG5Lu75L2V5YaF5a6555So5LqO5ZWG5Lia5oiW6Z2e5rOV55uu55qE77yM5ZCm5YiZ5ZCO5p6c6Ieq6LSf44CCCiog54yr54yr55yL55yLIFYxLjQ0CgoqIOa0u+WKqOWFpeWPoyzlvq7kv6HmiZPlvIDvvJoKKiDlpoLmnpzov57mjqXov4fmnJ/kuobov5DooYzkuIDkuIvlsLHlh7rmnaXkuobmnIDmlrDnmoTlhaXlj6PvvIEKKiBodHRwczovL3MxaTYuMW9iZy5zaG9wL2hhb2Jhb2Jhby9hdXRoLzU4NDg3ZjI5MTk4NWM1ZjMyYzE2YjNiMDFiOTZhOTEyCiog5omT5byA5rS75Yqo5YWl5Y+j77yM5oqT5YyF55qE5Lu75oSP5o6l5Y+jY29va2llc+S4reeahENvb2tpZeWPguaVsAoqIAoqIOWPmOmHj+agvOW8j++8mgoqIOaWsOW7uuWQjOWQjeeOr+Wig+WPmOmHjwoqIOWPmOmHj+WQje+8mm15a2t5ZAoqIOWPmOmHj+WAvO+8mgoqICMgMzAwMCDku6PooaggM+avm++8jOWQjumdouS4pOS4quaOqOmAgeWPguaVsOWPr+S4jeWhq++8jOmCo+WwseW/hemhu+mFjee9ruWFqOWxgOaOqOmAge+8gQoqIOi0puWPt+Wkh+azqCNDb29raWXlj4LmlbAj5o+Q546w6YeR6aKd5aaCMzAwMCN3eHB1c2hBcHB0b2tlbiN3eHB1c2hUb3BpY0lkCiogCiog5YW25LuW5Y+C5pWw6K+05piO77yI6ISa5pys5pyA5LiL5pa55aGr5YaZ5Y+C5pWw77yJCiogd3hwdXNoZXLlhajlsYDlj4LmlbDvvJp3eHB1c2hlckFwcFRva2Vu44CBd3hwdXNoZXJUb3BpY0lkCiog5YW35L2T5L2/55So5pa55rOV6K+355yL5paH5qGj5Zyw5Z2A77yaaHR0cHM6Ly93eHB1c2hlci56amllY29kZS5jb20vZG9jcy8jLwoqIAoqIOS5n+WPr+S9v+eUqCDlvq7kv6HmnLrlmajkurrvvJp3ZWNoYXRCdXNzaW5lc3NLZXkKKiAKKiDmlK/mjIHmlK/ku5jlrp3mj5DnjrDvvJrotKblj7flpIfms6gjQ29va2ll5Y+C5pWwI+aPkOeOsOmHkemineWmgjMwMDAjd3hwdXNoQXBwdG9rZW4jd3hwdXNoVG9waWNJZCPmlK/ku5jlrp3lp5PlkI0j5pSv5LuY5a6d6LSm5Y+3Ciog5Y+q5oOz5o+Q546w5pSv5LuY5a6d77yM5LiN5oOz5aGr5YaZ5YW25LuW5Y+C5pWw77yM5pyA5bCR55qE5Y+C5pWw5bCx5piv77ya6LSm5Y+35aSH5rOoI0Nvb2tpZeWPguaVsCMjI+aUr+S7mOWuneWnk+WQjSPmlK/ku5jlrp3otKblj7cKKgoqIOWinuWKoCDoh6rlrprkuYnmo4DmtYvmlofnq6DnrYnlvoXml7bpl7TvvJpteWtreWRSZWFkUG9zdERlbGF577yM6buY6K6k5YC85pivIDE1LTIw56eSCiog5a6a5pe26L+Q6KGM5q+P5Y2K5bCP5pe25LiA5qyhCiog6L6+5Yiw5qCH5YeG6Ieq5Yqo5o+Q546wCiog6L6+5Yiw5qCH5YeG77yM6Ieq5Yqo5o+Q546wCiIiIgoKaW1wb3J0IGhhc2hsaWIKaW1wb3J0IGpzb24KaW1wb3J0IG1hdGgKaW1wb3J0IG9zCmltcG9ydCBzdHJpbmcKaW1wb3J0IHRpbWUKaW1wb3J0IHJlcXVlc3RzCmltcG9ydCByYW5kb20KaW1wb3J0IHJlCmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCBxdW90ZSwgdXJscGFyc2UsIHBhcnNlX3FzCmltcG9ydCB1cmxsaWIzCmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCBwYXJzZV9xcywgdXJsc3BsaXQKCnVybGxpYjMuZGlzYWJsZV93YXJuaW5ncygpCgojIOWhq3d4cHVzaGVy55qEYXBwVG9rZW7vvIzphY3nva7lnKjnjq/looPlj5jph4/ph4zov5nmoLfmsqHphY3nva7nmoTotKblj7fkvJroh6rliqjkvb/nlKjov5nkuKrmjqjpgIEKd3hwdXNoZXJBcHBUb2tlbiA9IG9zLmdldGVudigid3hwdXNoZXJBcHBUb2tlbiIpIG9yICIiCnd4cHVzaGVyVG9waWNJZCA9IG9zLmdldGVudigid3hwdXNoZXJUb3BpY0lkIikgb3IgIiIKd2VjaGF0QnVzc2luZXNzS2V5ID0gb3MuZ2V0ZW52KCJ3ZWNoYXRCdXNzaW5lc3NLZXkiKSBvciAiIgpyZWFkUG9zdERlbGF5ID0gMAppZiBvcy5nZXRlbnYoIm15a2t5ZFJlYWRQb3N0RGVsYXkiKSBhbmQgb3MuZ2V0ZW52KCJteWtreWRSZWFkUG9zdERlbGF5IikuaXNkZWNpbWFsKCk6CiAgICByZWFkUG9zdERlbGF5ID0gaW50KG9zLmdldGVudigibXlra3lkUmVhZFBvc3REZWxheSIpKQoKCmRlZiBwdXNoKGFwcFRva2VuLCB0b3BpY0lkcywgdGl0bGUsIGxpbmssIHRleHQsIHR5cGUpOgogICAgZGF0YXB1c3QgPSB7CiAgICAgICAgImFwcFRva2VuIjogYXBwVG9rZW4sCiAgICAgICAgImNvbnRlbnQiOiBmIiIiPGJvZHkgb25sb2FkPSJ3aW5kb3cubG9jYXRpb24uaHJlZj0ne2xpbmt9JyI+5Ye6546w5qOA5rWL5paH56ug77yB77yB77yBXG48YSBzdHlsZT0ncGFkZGluZzoxMHB4O2NvbG9yOnJlZDtmb250LXNpemU6MjBweDsnIGhyZWY9J3tsaW5rfSc+54K55Ye75oiR5omT5byA5b6F5qOA5rWL5paH56ugPC9hPlxu6K+35bC95b+r54K55Ye76ZO+5o6l5a6M5oiQ6ZiF6K+7XG7lpIfms6jvvJp7dGV4dH08L2JvZHk+IiIiLAogICAgICAgICJzdW1tYXJ5IjogdGl0bGUgb3IgIueMq+eMq+eci+eci+mYheivuyIsCiAgICAgICAgImNvbnRlbnRUeXBlIjogMiwKICAgICAgICAidG9waWNJZHMiOiBbdG9waWNJZHMgb3IgIjExNjg2Il0sCiAgICAgICAgInVybCI6IGxpbmssCiAgICB9CiAgICAjIHByaW50KGRhdGFwdXN0KQogICAgdXJscHVzdCA9ICJodHRwOi8vd3hwdXNoZXIuemppZWNvZGUuY29tL2FwaS9zZW5kL21lc3NhZ2UiCiAgICB0cnk6CiAgICAgICAgcCA9IHJlcXVlc3RzLnBvc3QodXJsPXVybHB1c3QsIGpzb249ZGF0YXB1c3QsIHZlcmlmeT1GYWxzZSkKICAgICAgICAjIHByaW50KHApCiAgICAgICAgaWYgcC5qc29uKClbImNvZGUiXSA9PSAxMDAwOgogICAgICAgICAgICBwcmludCgi4pyFIOaOqOmAgeaWh+eroOWIsOW+ruS/oeaIkOWKn++8jOivt+WwveW/q+WJjeW+gOeCueWHu+aWh+eroO+8jOS4jeeEtuWwsem7keWPt+WVpu+8gSIpCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoIuKdjCDmjqjpgIHmlofnq6DliLDlvq7kv6HlpLHotKXvvIzlrozniorlrZDvvIzopoHpu5Hlj7fkuobvvIEiKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIGV4Y2VwdDoKICAgICAgICBwcmludCgi4p2MIOaOqOmAgeaWh+eroOWIsOW+ruS/oeWksei0pe+8jOWujOeKiuWtkO+8jOimgem7keWPt+S6hu+8gSIpCiAgICAgICAgcmV0dXJuIEZhbHNlCgoKZGVmIHB1c2hXZWNoYXRCdXNzaW5lc3Mocm9ib3RLZXksIGxpbmspOgogICAgZGF0YXB1c3QgPSB7Im1zZ3R5cGUiOiAidGV4dCIsICJ0ZXh0IjogeyJjb250ZW50IjogbGlua319CiAgICAjIHByaW50KGRhdGFwdXN0KQogICAgdXJscHVzdCA9ICJodHRwczovL3F5YXBpLndlaXhpbi5xcS5jb20vY2dpLWJpbi93ZWJob29rL3NlbmQ/a2V5PSIgKyByb2JvdEtleQogICAgdHJ5OgogICAgICAgIHAgPSByZXF1ZXN0cy5wb3N0KHVybD11cmxwdXN0LCBqc29uPWRhdGFwdXN0LCB2ZXJpZnk9RmFsc2UpCiAgICAgICAgIyBwcmludChwKQogICAgICAgIGlmIHAuanNvbigpWyJlcnJjb2RlIl0gPT0gMDoKICAgICAgICAgICAgcHJpbnQoIuKchSDmjqjpgIHmlofnq6DliLDkvIHkuJrlvq7kv6HmiJDlip/vvIEiKQogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KCLinYwg5o6o6YCB5paH56ug5Yiw5LyB5Lia5b6u5L+h5aSx6LSl77yBIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICBleGNlcHQ6CiAgICAgICAgcHJpbnQoIuKdjCDmjqjpgIHmlofnq6DliLDkvIHkuJrlvq7kv6HlpLHotKXvvIEiKQogICAgICAgIHJldHVybiBGYWxzZQoKCmRlZiBnZXRpbmZvKGxpbmspOgogICAgdHJ5OgogICAgICAgIHIgPSByZXF1ZXN0cy5nZXQobGluaywgdmVyaWZ5PUZhbHNlKQogICAgICAgICMgcHJpbnQobGluaywgci50ZXh0KQogICAgICAgIGh0bWwgPSByZS5zdWIoIlxzIiwgIiIsIHIudGV4dCkKICAgICAgICBiaXogPSByZS5maW5kYWxsKCd2YXJiaXo9IiguKj8pIlx8XHwnLCBodG1sKQogICAgICAgIGlmIGJpeiAhPSBbXToKICAgICAgICAgICAgYml6ID0gYml6WzBdCiAgICAgICAgaWYgYml6ID09ICIiIG9yIGJpeiA9PSBbXToKICAgICAgICAgICAgaWYgIl9fYml6IiBpbiBsaW5rOgogICAgICAgICAgICAgICAgYml6ID0gcmUuZmluZGFsbCgiX19iaXo9KC4qPykmIiwgbGluaykKICAgICAgICAgICAgICAgIGlmIGJpeiAhPSBbXToKICAgICAgICAgICAgICAgICAgICBiaXogPSBiaXpbMF0KICAgICAgICBuaWNrbmFtZSA9IHJlLmZpbmRhbGwoJ3Zhcm5pY2tuYW1lPWh0bWxEZWNvZGVcKCIoLio/KSJcKTsnLCBodG1sKQogICAgICAgIGlmIG5pY2tuYW1lICE9IFtdOgogICAgICAgICAgICBuaWNrbmFtZSA9IG5pY2tuYW1lWzBdCiAgICAgICAgdXNlcl9uYW1lID0gcmUuZmluZGFsbCgndmFydXNlcl9uYW1lPSIoLio/KSI7JywgaHRtbCkKICAgICAgICBpZiB1c2VyX25hbWUgIT0gW106CiAgICAgICAgICAgIHVzZXJfbmFtZSA9IHVzZXJfbmFtZVswXQogICAgICAgIG1zZ190aXRsZSA9IHJlLmZpbmRhbGwoInZhcm1zZ190aXRsZT0nKC4qPyknXC5odG1sXCgiLCBodG1sKQogICAgICAgIGlmIG1zZ190aXRsZSAhPSBbXToKICAgICAgICAgICAgbXNnX3RpdGxlID0gbXNnX3RpdGxlWzBdCiAgICAgICAgdGV4dCA9IGYi5YWs5LyX5Y+35ZSv5LiA5qCH6K+G77yae2Jpen185paH56ugOnttc2dfdGl0bGV9fOS9nOiAhTp7bmlja25hbWV9fOi0puWPtzp7dXNlcl9uYW1lfSIKICAgICAgICBwcmludCh0ZXh0KQogICAgICAgIHJldHVybiBuaWNrbmFtZSwgdXNlcl9uYW1lLCBtc2dfdGl0bGUsIHRleHQsIGJpegogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICMgcHJpbnQoZSkKICAgICAgICBwcmludCgi4p2MIOaPkOWPluaWh+eroOS/oeaBr+Wksei0pSIpCiAgICAgICAgcmV0dXJuIEZhbHNlCgoKZGVmIHRzKCk6CiAgICByZXR1cm4gc3RyKGludCh0aW1lLnRpbWUoKSkpICsgIjAwMCIKCgpjaGVja0RpY3QgPSB7CiAgICAiTXpreE5URTNNelE0TVE9PSI6IFsi6aaZ5aeQ54ix5peF6KGMIiwgImdoXzU0YTY1ZGM2MDAzOSJdLAogICAgIk16ZzVNak0wTURFd053PT0iOiBbIuaIkeacrOmdnuWHoSIsICJnaF80NmIwNzY5MDM0NzMiXSwKICAgICJNelV6T0RZNE56RTJPUT09IjogWyLlpJrogonokaHokIQyMDIwIiwgImdoX2IzZDc5Y2QxZTFiNSJdLAogICAgIk16a3lNakUzTXpZeE1nPT0iOiBbIllvdWhmdWwiLCAiZ2hfYjNkNzljZDFlMWI1Il0sCiAgICAiTXpreE5qTXdOREl6T0E9PSI6IFsi5bCR5bm05rKh5pyJ5LmM5omY6YKmMyIsICJnaF9iM2Q3OWNkMWUxYjUiXSwKICAgICJNemczTnpVeE1qYzVNZz09IjogWyLmmJ/mmJ/or7roqIAiLCAiZ2hfYjNkNzljZDFlMWI1Il0sCiAgICAiTXpnNE5UY3dPREUxTkE9PSI6IFsi5paR6ams6L+Y5rKh552hMTIzIiwgImdoX2IzZDc5Y2QxZTFiNSJdLAogICAgIk16azBPREl4T0RFNE9RPT0iOiBbIuaMgeWutuWmmeaLm+WuneWFuCIsICJnaF9iM2Q3OWNkMWUxYjUiXSwKICAgICJNemcyTmpVeU1qSTFOQT09IjogWyJMaWxpbm5nIiwgImdoX2IzZDc5Y2QxZTFiNSJdLAogICAgIk16SXpNRGN6T0RnNE13PT0iOiBbIuacieaVheS6i+eahOWQjOWtplkiLCAiZ2hfYjNkNzljZDFlMWI1Il0sCiAgICAiTXpnNU9EVXlNell6TVE9PSI6IFsiNzg55Lmf5LiN6KGMIiwgImdoX2IzZDc5Y2QxZTFiNSJdLAogICAgIk16VTBOekk1TWpjNE9RPT0iOiBbIuearuibi+eYpuiCieeMqiIsICJnaF81OGQ3ZWU1OTNiODYiXSwKICAgICJNemc1TURneE9EQXpNZz09IjogWyLljJfljJflsI/liqnmiYsiLCAiZ2hfNThkN2VlNTkzYjg2Il0sCiAgICAiTXpJek1EY3pPRGc0TXc9PSI6IFsi5pyJ5pWF5LqL55qE5ZCM5a2mWSIsICJnaF9iOGI5MjkzNGRhNWYiXSwKICAgICJNemt4TkRVMU5ERXpOdz09IjogWyLnjKvnjKvnnIvnnIvmnI3liqEiLCAiZ2hfZTUwY2ZlZmVmOWU1Il0sCn0KCgpjbGFzcyBISFlEOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGNnKToKICAgICAgICBzZWxmLkNvb2tpZSA9IGNnWyJDb29raWUiXQogICAgICAgIHNlbGYudHhieiA9IGNnWyJ0eGJ6Il0KICAgICAgICBzZWxmLnRvcGljSWRzID0gY2dbInRvcGljSWRzIl0KICAgICAgICBzZWxmLmFwcFRva2VuID0gY2dbImFwcFRva2VuIl0KICAgICAgICBnbG9iYWwgd2VjaGF0QnVzc2luZXNzS2V5CiAgICAgICAgc2VsZi53ZWNoYXRCdXNzaW5lc3NLZXkgPSB3ZWNoYXRCdXNzaW5lc3NLZXkgb3IgIiIKICAgICAgICBzZWxmLmFsaUFjY291bnQgPSBjZ1siYWxpQWNjb3VudCJdIG9yICIiCiAgICAgICAgc2VsZi5hbGlOYW1lID0gY2dbImFsaU5hbWUiXSBvciAiIgogICAgICAgIHNlbGYubmFtZSA9IGNnWyJuYW1lIl0KICAgICAgICBzZWxmLmRvbW5haW5Ib3N0ID0gIjE2OTg4NTUxMzkuaHhpb25nLnRvcCIKICAgICAgICBzZWxmLnJlcXVlc3RfaWQgPSAiIgogICAgICAgIHNlbGYuaGVhZGVycyA9IHsKICAgICAgICAgICAgIkNvbm5lY3Rpb24iOiAia2VlcC1hbGl2ZSIsCiAgICAgICAgICAgICJBY2NlcHQiOiAiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0LCAqLyo7IHE9MC4wMSIsCiAgICAgICAgICAgICJVc2VyLUFnZW50IjogIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMDcuMC4wLjAgU2FmYXJpLzUzNy4zNiBOZXRUeXBlL1dJRkkgTWljcm9NZXNzZW5nZXIvNy4wLjIwLjE3ODEoMHg2NzAwMTQzQikgV2luZG93c1dlY2hhdCgweDYzMDkwNjIxKSBYV0VCLzgzNTEgRmx1ZSIsCiAgICAgICAgICAgICJYLVJlcXVlc3RlZC1XaXRoIjogIlhNTEh0dHBSZXF1ZXN0IiwKICAgICAgICAgICAgIlJlZmVyZXIiOiBmImh0dHA6Ly97c2VsZi5kb21uYWluSG9zdH0vIiwKICAgICAgICAgICAgIk9yaWdpbiI6IGYiaHR0cDovL3tzZWxmLmRvbW5haW5Ib3N0fSIsCiAgICAgICAgICAgICMgIkhvc3QiOiBmIntzZWxmLmRvbW5haW5Ib3N0fSIsCiAgICAgICAgICAgICJBY2NlcHQtRW5jb2RpbmciOiAiZ3ppcCwgZGVmbGF0ZSIsCiAgICAgICAgICAgICJBY2NlcHQtTGFuZ3VhZ2UiOiAiemgtQ04semgiLAogICAgICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOCIsCiAgICAgICAgICAgICJDb29raWUiOiBzZWxmLkNvb2tpZSwKICAgICAgICB9CiAgICAgICAgc2VsZi5zZWMgPSByZXF1ZXN0cy5zZXNzaW9uKCkKICAgICAgICBzZWxmLnNlYy52ZXJpZnkgPSBGYWxzZQogICAgICAgIHNlbGYuc2VjLmhlYWRlcnMgPSBzZWxmLmhlYWRlcnMKICAgICAgICBzZWxmLmxhc3RiaXogPSAiIgoKICAgIGRlZiB1c2VyX2luZm8oc2VsZik6CiAgICAgICAgdSA9IGYiaHR0cDovL3tzZWxmLmRvbW5haW5Ib3N0fS9oYW9iYW9iYW8vdXNlciIKICAgICAgICByID0gIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHIgPSBzZWxmLnNlYy5nZXQodSkKICAgICAgICAgICAgcmogPSByLmpzb24oKQogICAgICAgICAgICBpZiByai5nZXQoImVycmNvZGUiKSA9PSAwOgogICAgICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d6I635Y+W5L+h5oGv5oiQ5Yqf77yM55So5oi3SUTkuLoge3IuanNvbigpWydkYXRhJ11bJ3VzZXJpZCddfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d6I635Y+W55So5oi35L+h5oGv5aSx6LSl77yM6LSm5Y+35byC5bi4IOaIluiAhSBDb29raWXml6DmlYjvvIzor7fmo4DmtYtDb29raWXmmK/lkKbmraPnoa4iKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBwcmludChyLnRleHQpCiAgICAgICAgICAgIHByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeiOt+WPlueUqOaIt+S/oeaBr+Wksei0pSxDb29raWXml6DmlYjvvIzor7fmo4DmtYtDb29raWXmmK/lkKbmraPnoa4iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICBkZWYgZ29sZChzZWxmKToKICAgICAgICByID0gIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHUgPSBmImh0dHA6Ly97c2VsZi5kb21uYWluSG9zdH0vaGFvYmFvYmFvL3dvcmtpbmZvIgogICAgICAgICAgICByID0gc2VsZi5zZWMuZ2V0KHUpCiAgICAgICAgICAgICMgcHJpbnQoci5qc29uKCkpCiAgICAgICAgICAgIHJqID0gci5qc29uKCkKICAgICAgICAgICAgc2VsZi5yZW1haW5fZ29sZCA9IG1hdGguZmxvb3IoaW50KHJqLmdldCgiZGF0YSIpLmdldCgicmVtYWluX2dvbGQiKSkpCiAgICAgICAgICAgIHNlbGYucmVtYWluID0gZmxvYXQocmouZ2V0KCJkYXRhIikuZ2V0KCJyZW1haW4iKSkKICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICBmJ+S7iuaXpeW3sue7j+mYheivu+S6hntyai5nZXQoImRhdGEiKS5nZXQoImRheXJlYWRzIil956+H5paH56ugIOW9k+WJjemHkeW4gXtyai5nZXQoImRhdGEiKS5nZXQoInJlbWFpbl9nb2xkIil9IOW9k+WJjeS9meminXtzZWxmLnJlbWFpbn0nCiAgICAgICAgICAgICkKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeiOt+WPlumHkeW4geWksei0pSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBnZXRLZXkoc2VsZik6CiAgICAgICAgdWsgPSAiIgogICAgICAgIHVrUmVzID0gTm9uZQogICAgICAgIGZvciBpIGluIHJhbmdlKDEwKToKICAgICAgICAgICAgdSA9IGYiaHR0cDovL3tzZWxmLmRvbW5haW5Ib3N0fS9oYW9iYW9iYW8vd3RtcGRvbWFpbiIKICAgICAgICAgICAgIyBwcmludCgi5o+Q56S6IGdldEtlee+8miIsIHUpCiAgICAgICAgICAgIHAgPSBmIiIKICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QodSwgaGVhZGVycz1zZWxmLmhlYWRlcnMsIGRhdGE9cCwgdmVyaWZ5PUZhbHNlKQogICAgICAgICAgICAjIHByaW50KCJnZXRLZXnvvJoiLCByLnRleHQpCiAgICAgICAgICAgIHJqID0gci5qc29uKCkKICAgICAgICAgICAgZG9tYWluID0gcmouZ2V0KCJkYXRhIikuZ2V0KCJkb21haW4iKQogICAgICAgICAgICAjIHByaW50KCLor7fmsYLkuK3ovazpobXvvJoiLCByLnRleHQpCiAgICAgICAgICAgIHBwID0gcGFyc2VfcXModXJscGFyc2UoZG9tYWluKS5xdWVyeSkKICAgICAgICAgICAgaG4gPSB1cmxwYXJzZShkb21haW4pLm5ldGxvYwogICAgICAgICAgICB1ayA9IHBwLmdldCgidWsiKVswXQogICAgICAgICAgICB1a1JlcyA9IHIudGV4dAogICAgICAgICAgICBpZiB1azoKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgaWYgdWsgPT0gIiI6CiAgICAgICAgICAgIHByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeiOt+WPlnVr5aSx6LSl77yM6L+U5Zue6ZSZ6K+v77yae3VrUmVzfSIpCiAgICAgICAgICAgIHJldHVybgogICAgICAgIHRpbWUuc2xlZXAoOCkKICAgICAgICByID0gcmVxdWVzdHMuZ2V0KAogICAgICAgICAgICBkb21haW4sCiAgICAgICAgICAgIGhlYWRlcnM9ewogICAgICAgICAgICAgICAgIkFjY2VwdCI6ICJ0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjkiLAogICAgICAgICAgICAgICAgIkFjY2VwdC1FbmNvZGluZyI6ICJnemlwLCBkZWZsYXRlLCBiciIsCiAgICAgICAgICAgICAgICAiQWNjZXB0LUxhbmd1YWdlIjogInpoLUNOLHpoO3E9MC45IiwKICAgICAgICAgICAgICAgICJDb25uZWN0aW9uIjogImtlZXAtYWxpdmUiLAogICAgICAgICAgICAgICAgIkhvc3QiOiBmIntobn0iLAogICAgICAgICAgICAgICAgIlNlYy1GZXRjaC1EZXN0IjogImRvY3VtZW50IiwKICAgICAgICAgICAgICAgICJTZWMtRmV0Y2gtTW9kZSI6ICJuYXZpZ2F0ZSIsCiAgICAgICAgICAgICAgICAiU2VjLUZldGNoLVNpdGUiOiAibm9uZSIsCiAgICAgICAgICAgICAgICAiU2VjLUZldGNoLVVzZXIiOiAiPzEiLAogICAgICAgICAgICAgICAgIlVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHMiOiAiMSIsCiAgICAgICAgICAgICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTA3LjAuMC4wIFNhZmFyaS81MzcuMzYgTmV0VHlwZS9XSUZJIE1pY3JvTWVzc2VuZ2VyLzcuMC4yMC4xNzgxKDB4NjcwMDE0M0IpIFdpbmRvd3NXZWNoYXQoMHg2MzA5MDcxZCkgWFdFQi84NDYxIEZsdWUiLAogICAgICAgICAgICB9LAogICAgICAgICAgICB2ZXJpZnk9RmFsc2UsCiAgICAgICAgKQogICAgICAgICMgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1dIOmYheivu+WHhuWkh+WujOaIkO+8mnt1a33vvIzmj5Dlj5bliLDnmoTlnLDlnYDvvJp7ZG9tYWlufSIpCiAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1dIOmYheivu+WHhuWkh+aIkOWKnyDljbPlsIblvIDlp4vpmIXor7sg4pyFIO+8jOmYheivu+WPguaVsOS4uu+8mnt1a30iKQogICAgICAgIGggPSB7CiAgICAgICAgICAgICJBY2NlcHQiOiAiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0LCAqLyo7IHE9MC4wMSIsCiAgICAgICAgICAgICJBY2NlcHQtRW5jb2RpbmciOiAiZ3ppcCwgZGVmbGF0ZSwgYnIiLAogICAgICAgICAgICAiQWNjZXB0LUxhbmd1YWdlIjogInpoLUNOLHpoO3E9MC45IiwKICAgICAgICAgICAgIkNvbm5lY3Rpb24iOiAia2VlcC1hbGl2ZSIsCiAgICAgICAgICAgICJIb3N0IjogIm5zci56c2YyMDIzZTQ1OC5jbG91ZCIsCiAgICAgICAgICAgICJPcmlnaW4iOiBmImh0dHBzOi8ve2hufSIsCiAgICAgICAgICAgICJTZWMtRmV0Y2gtRGVzdCI6ICJlbXB0eSIsCiAgICAgICAgICAgICJTZWMtRmV0Y2gtTW9kZSI6ICJjb3JzIiwKICAgICAgICAgICAgIlNlYy1GZXRjaC1TaXRlIjogImNyb3NzLXNpdGUiLAogICAgICAgICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTA3LjAuMC4wIFNhZmFyaS81MzcuMzYgTmV0VHlwZS9XSUZJIE1pY3JvTWVzc2VuZ2VyLzcuMC4yMC4xNzgxKDB4NjcwMDE0M0IpIFdpbmRvd3NXZWNoYXQoMHg2MzA5MDcxZCkgWFdFQi84NDYxIEZsdWUiLAogICAgICAgIH0KICAgICAgICByZXR1cm4gdWssIGgKCiAgICBkZWYgcmVhZChzZWxmKToKICAgICAgICBpbmZvID0gc2VsZi5nZXRLZXkoKQogICAgICAgIGlmIGxlbihpbmZvKSA9PSAwOgogICAgICAgICAgICBwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV3ojrflj5bpmIXor7vlj4LmlbDlpLHotKXvvIzlgZzmraLlvoDlkI7pmIXor7vvvIHimqDvuI8gIikKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgIyBwcmludChpbmZvKQogICAgICAgIHRpbWUuc2xlZXAoMikKICAgICAgICBhcmN0aWxlVGltZSA9IDEKICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICByZXMgPSB7ImVycmNvZGUiOiAtMX0KICAgICAgICAgICAgcmVmcmVzaFRpbWUgPSAwCiAgICAgICAgICAgIHdoaWxlIHJlc1siZXJyY29kZSJdICE9IDA6CiAgICAgICAgICAgICAgICB0aW1lU3RhbXAgPSBzdHIodHMoKSkKICAgICAgICAgICAgICAgIG15c2lnbiA9IGhhc2hsaWIubWQ1KAogICAgICAgICAgICAgICAgICAgICgKICAgICAgICAgICAgICAgICAgICAgICAgaW5mb1sxXVsiT3JpZ2luIl0ucmVwbGFjZSgiaHR0cHM6Ly8iLCAiIikucmVwbGFjZSgiLyIsICIiKQogICAgICAgICAgICAgICAgICAgICAgICArIHRpbWVTdGFtcAogICAgICAgICAgICAgICAgICAgICAgICArICJMaio/UTMjcE92aVciCiAgICAgICAgICAgICAgICAgICAgKS5lbmNvZGUoKQogICAgICAgICAgICAgICAgKS5oZXhkaWdlc3QoKQogICAgICAgICAgICAgICAgc2VsZi5wYXJhbXMgPSB7CiAgICAgICAgICAgICAgICAgICAgInVrIjogaW5mb1swXSwKICAgICAgICAgICAgICAgICAgICAidGltZSI6IHRpbWVTdGFtcCwKICAgICAgICAgICAgICAgICAgICAibXlzaWduIjogbXlzaWduLAogICAgICAgICAgICAgICAgICAgICJ2IjogIjMuMCIsCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB1ID0gZiJodHRwczovL25zci56c2YyMDIzZTQ1OC5jbG91ZC9oYW9iYW9iYW8vZ2V0cmVhZDIiCiAgICAgICAgICAgICAgICAjIHByaW50KAogICAgICAgICAgICAgICAgIyAgICAgIumYheivu+aWh+eroOWPguaVsOafpeeci++8miIsCiAgICAgICAgICAgICAgICAjICAgICB1LAogICAgICAgICAgICAgICAgIyAgICAgc2VsZi5wYXJhbXMsCiAgICAgICAgICAgICAgICAjICAgICBpbmZvLAogICAgICAgICAgICAgICAgIyAgICAgaW5mb1sxXVsiT3JpZ2luIl0ucmVwbGFjZSgiaHR0cHM6Ly8iLCAiIikucmVwbGFjZSgiLyIsICIiKSwKICAgICAgICAgICAgICAgICMgKQogICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLmdldCgKICAgICAgICAgICAgICAgICAgICB1LCBoZWFkZXJzPWluZm9bMV0sIHBhcmFtcz1zZWxmLnBhcmFtcywgdmVyaWZ5PUZhbHNlLCB0aW1lb3V0PTYwCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBwcmludCgiLSIgKiA1MCkKICAgICAgICAgICAgICAgICMgcHJpbnQoCiAgICAgICAgICAgICAgICAjICAgICBmIui0puWPt1t7c2VsZi5uYW1lfV3nrKxbe3JlZnJlc2hUaW1lKzF9XeasoeiOt+WPlumYheivu+aWh+eroFt7aW5mb1swXX1d55uu55qE6aG177yae3IudGV4dH0iCiAgICAgICAgICAgICAgICAjICkKICAgICAgICAgICAgICAgIGlmIHIudGV4dCBhbmQgci5qc29uKClbImVycmNvZGUiXSA9PSAwOgogICAgICAgICAgICAgICAgICAgIHJlcyA9IHIuanNvbigpCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeesrFt7cmVmcmVzaFRpbWUrMX1d5qyh6I635Y+W56ysW3thcmN0aWxlVGltZX1d56+H6ZiF6K+75paH56ugW3tpbmZvWzBdfV3ot7Povazpk77mjqXmiJDlip8iCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBkZWNvZGVkX3N0ciA9IGpzb24ubG9hZHMoci50ZXh0KQogICAgICAgICAgICAgICAgICAgIGlmIGRlY29kZWRfc3RyWyJtc2ciXToKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIui0puWPt1t7c2VsZi5uYW1lfV3nrKxbe3JlZnJlc2hUaW1lKzF9XeasoeiOt+WPluesrFt7YXJjdGlsZVRpbWV9Xeevh+mYheivu+aWh+eroFt7aW5mb1swXX1d6Lez6L2s6ZO+5o6l5aSx6LSl77yae2RlY29kZWRfc3RyWydtc2cnXX0iCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIui0puWPt1t7c2VsZi5uYW1lfV3nrKxbe3JlZnJlc2hUaW1lKzF9XeasoeiOt+WPluesrFt7YXJjdGlsZVRpbWV9Xeevh+mYheivu+aWh+eroFt7aW5mb1swXX1d6Lez6L2s6ZO+5o6l5aSx6LSl77yae3IudGV4dH0iCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMS41KQogICAgICAgICAgICAgICAgcmVmcmVzaFRpbWUgPSByZWZyZXNoVGltZSArIDEKICAgICAgICAgICAgICAgIGlmIHJlZnJlc2hUaW1lID49IDU6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiLimqDvuI8g6LSm5Y+3W3tzZWxmLm5hbWV9XeiOt+WPlumYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1d6LaF5pe24oCm4oCmIikKICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgd2VjaGF0UG9zdExpbmsgPSAiIgogICAgICAgICAgICBpZiByZXMuZ2V0KCJlcnJjb2RlIikgPT0gMDoKICAgICAgICAgICAgICAgIHJldHVybkxpbmsgPSAiIgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIHJldHVybkxpbmsgPSByZXMuZ2V0KCJkYXRhIikuZ2V0KCJsaW5rIikKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgZiLimqDvuI8g6LSm5Y+3W3tzZWxmLm5hbWV9XeiOt+WPlumYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1d6ZO+5o6l5aSx6LSl77yM55aR5Ly85Y+w5a2Q5o6l5Y+j5aSq5Z6D5Zy+77yM5bSp5LqG77yM6L+U5Zue5pWw5o2u5Li677yaIiwKICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmdldCgiZGF0YSIpLAogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgaWYgIm1wLndlaXhpbi5xcS5jb20iIGluIHJldHVybkxpbms6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1dIOmYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+W+ruS/oeaWh+eroO+8mntyZXR1cm5MaW5rfSIpCiAgICAgICAgICAgICAgICAgICAgd2VjaGF0UG9zdExpbmsgPSByZXR1cm5MaW5rCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICMgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1dIOmYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroOWHhuWkh+i3s+i9rO+8mntsaW5rfSIpCiAgICAgICAgICAgICAgICAgICAgd2VjaGF0UG9zdExpbmsgPSBzZWxmLmp1bXAocmV0dXJuTGluaykKICAgICAgICAgICAgICAgICAgICBwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV0g6ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5b6u5L+h5paH56ug77yae3dlY2hhdFBvc3RMaW5rfSIpCiAgICAgICAgICAgICAgICBwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV0g6ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5paH56ug77yae3dlY2hhdFBvc3RMaW5rfSIpCiAgICAgICAgICAgICAgICBhID0gZ2V0aW5mbyh3ZWNoYXRQb3N0TGluaykKICAgICAgICAgICAgICAgIGlmIGEgPT0gRmFsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIGYi4pqg77iPIOi0puWPt1t7c2VsZi5uYW1lfV3lm6Ag6I635Y+W5YWs5LyX5Y+35paH56ug5L+h5oGv5LiN5oiQ5Yqf77yM5a+86Ie06ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5paH56ugW3tpbmZvWzBdfV0g5aSx6LSl4oCm4oCmIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgIHNsZWVwVGltZSA9IHJhbmRvbS5yYW5kaW50KDcsIDEwKQogICAgICAgICAgICAgICAgIyDlpoLmnpzmmK/mo4DmtYvnibnlvoHliLDnmoTmlofnq6Ag5oiW6ICFIOWQjuS4gOevh+aWh+eroOS4juWJjeS4gOevh+ebuOS8vAogICAgICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgICAgIGNoZWNrRGljdC5nZXQoYVs0XSkgIT0gTm9uZQogICAgICAgICAgICAgICAgICAgIG9yIChyZXMuZ2V0KCJkYXRhIikuZ2V0KCJhIikgPT0gMikKICAgICAgICAgICAgICAgICAgICBvciAoIiZjaGtzbT0iIGluIHdlY2hhdFBvc3RMaW5rKQogICAgICAgICAgICAgICAgKToKICAgICAgICAgICAgICAgICAgICBzbGVlcFRpbWUgPSByZWFkUG9zdERlbGF5IG9yIHJhbmRvbS5yYW5kaW50KDE1LCAyMCkKICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgZiLimqDvuI8g6LSm5Y+3W3tzZWxmLm5hbWV9XemYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1dIOajgOa1i+WIsOeWkeS8vOajgOa1i+aWh+eroO+8jOato+WcqOaOqOmAge+8jOetieW+hei/h+ajgOa1i++8jOetieW+heaXtumXtO+8mntzbGVlcFRpbWV956eS44CC44CC44CCIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBpZiBzZWxmLndlY2hhdEJ1c3NpbmVzc0tleToKICAgICAgICAgICAgICAgICAgICAgICAgcHVzaFdlY2hhdEJ1c3NpbmVzcyhzZWxmLndlY2hhdEJ1c3NpbmVzc0tleSwgd2VjaGF0UG9zdExpbmspCiAgICAgICAgICAgICAgICAgICAgZWxpZiBzZWxmLmFwcFRva2VuOgogICAgICAgICAgICAgICAgICAgICAgICBwdXNoKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hcHBUb2tlbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudG9waWNJZHMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAi54yr54yr55yL55yL6ZiF6K+76L+H5qOA5rWLIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlY2hhdFBvc3RMaW5rLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZiLotKblj7dbe3NlbGYubmFtZX1d6ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5paH56ugW3tpbmZvWzBdfV0g5q2j5Zyo562J5b6F6L+H5qOA5rWL77yM562J5b6F5pe26Ze077yae3NsZWVwVGltZX3np5JcbuW5u+eUn+aPkOekuu+8muW/q+eCue+8jOWIq+iAveaQgeaXtumXtOS6hu+8gSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAibXlra3lkIiwKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZiLimqDvuI8g6LSm5Y+3W3tzZWxmLm5hbWV9XemYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1dIOmcgOimgei/h+ajgOa1i++8jOS9huaYr+acqumFjee9ruaOqOmAgXRva2Vu77yM5Li65LqG6YG/5YWN6buR5Y+377yM5YGc5q2i6ZiF6K+744CC44CC44CCIgogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgZiLinIUg6LSm5Y+3W3tzZWxmLm5hbWV9XemYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1dIOmdnuajgOa1i+aWh+eroO+8jOaooeaLn+ivu3tzbGVlcFRpbWV956eSIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIGxhc3Rlc3RBcmN0aWNsZUlkID0gd2VjaGF0UG9zdExpbmsKICAgICAgICAgICAgICAgIHNlbGYubGFzdGJpeiA9IGFbNF0KICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoc2xlZXBUaW1lKQogICAgICAgICAgICAgICAgdTEgPSBmImh0dHA6Ly9uc3IuenNmMjAyM2U0NTguY2xvdWQvaGFvYmFvYmFvL2FkZGdvbGRzMj90aW1lPXtzbGVlcFRpbWV9JnVrPXtpbmZvWzBdfSZwc2lnbj17bXlzaWdufSIKICAgICAgICAgICAgICAgIHIxID0gcmVxdWVzdHMuZ2V0KHUxLCBoZWFkZXJzPWluZm9bMV0sIHZlcmlmeT1GYWxzZSkKICAgICAgICAgICAgICAgIGlmIHIxLnRleHQgYW5kIHIxLmpzb24oKToKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZiLinIUg6LSm5Y+3W3tzZWxmLm5hbWV9XemYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1d5omA5b6X6YeR5biB77yae3IxLmpzb24oKVsnZGF0YSddWydnb2xkJ1195Liq77yM6LSm5oi35b2T5YmN6YeR5biB77yae3IxLmpzb24oKVsnZGF0YSddWydsYXN0X2dvbGQnXX3kuKrvvIzku4rml6Xlt7Lor7vvvJp7cjEuanNvbigpWydkYXRhJ11bJ2RheV9yZWFkJ1195qyh77yM5LuK5pel5pyq6K+7IHtyMS5qc29uKClbJ2RhdGEnXVsncmVtYWluX3JlYWQnXX3nr4fmlofnq6AiCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZiLinYwg6LSm5Y+3W3tzZWxmLm5hbWV9XemYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1d5byC5bi477yae3IxLmpzb24oKS5nZXQoJ21zZycpfSIKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAi5pys5qyh6ZiF6K+75peg5pWIIiBpbiByMS5qc29uKCkuZ2V0KCJtc2ciKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgZiLinYwg6LSm5Y+3W3tzZWxmLm5hbWV9XemYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1d5aSx6LSl77yae3IxLnRleHR9IgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBlbGlmIHJlcy5nZXQoImVycmNvZGUiKSA9PSA0MDU6CiAgICAgICAgICAgICAgICBwcmludChmIuKaoO+4jyDotKblj7dbe3NlbGYubmFtZX1d6ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5paH56ugW3tpbmZvWzBdfV3pmIXor7vph43lpI0iKQogICAgICAgICAgICAgICAgdGltZS5zbGVlcCgxLjUpCiAgICAgICAgICAgIGVsaWYgcmVzLmdldCgiZXJyY29kZSIpID09IDQwNzoKICAgICAgICAgICAgICAgIHByaW50KGYi4pqg77iPIOi0puWPt1t7c2VsZi5uYW1lfV3pmIXor7vnrKxbe2FyY3RpbGVUaW1lfV3nr4fmlofnq6Bbe2luZm9bMF19XemYheivu+e7k+adnyIpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcHJpbnQoZiLimqDvuI8g6LSm5Y+3W3tzZWxmLm5hbWV9XemYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1d5pyq55+l5oOF5Ya1IikKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMS41KQogICAgICAgICAgICBhcmN0aWxlVGltZSA9IGFyY3RpbGVUaW1lICsgMQoKICAgIGRlZiBqdW1wKHNlbGYsIGxpbmspOgogICAgICAgIHByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeW8gOWni+acrOasoemYheivu+KApuKApiIpCiAgICAgICAgaG4gPSB1cmxwYXJzZShsaW5rKS5uZXRsb2MKICAgICAgICBoID0gewogICAgICAgICAgICAiSG9zdCI6IGhuLAogICAgICAgICAgICAiQ29ubmVjdGlvbiI6ICJrZWVwLWFsaXZlIiwKICAgICAgICAgICAgIlVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHMiOiAiMSIsCiAgICAgICAgICAgICJVc2VyLUFnZW50IjogIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMDcuMC4wLjAgU2FmYXJpLzUzNy4zNiBOZXRUeXBlL1dJRkkgTWljcm9NZXNzZW5nZXIvNy4wLjIwLjE3ODEoMHg2NzAwMTQzQikgV2luZG93c1dlY2hhdCgweDYzMDkwNjIxKSBYV0VCLzgzNTEgRmx1ZSIsCiAgICAgICAgICAgICJBY2NlcHQiOiAidGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45IiwKICAgICAgICAgICAgIkFjY2VwdC1FbmNvZGluZyI6ICJnemlwLCBkZWZsYXRlIiwKICAgICAgICAgICAgIkFjY2VwdC1MYW5ndWFnZSI6ICJ6aC1DTix6aCIsCiAgICAgICAgICAgICJDb29raWUiOiBzZWxmLkNvb2tpZSwKICAgICAgICB9CiAgICAgICAgciA9IHJlcXVlc3RzLmdldChsaW5rLCBoZWFkZXJzPWgsIGFsbG93X3JlZGlyZWN0cz1GYWxzZSwgdmVyaWZ5PUZhbHNlKQogICAgICAgICMgcHJpbnQoci5zdGF0dXNfY29kZSkKICAgICAgICBMb2NhdGlvbiA9IHIuaGVhZGVycy5nZXQoIkxvY2F0aW9uIikKICAgICAgICBwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV3lvIDlp4vpmIXor7vmlofnq6AgLSB7TG9jYXRpb259IikKICAgICAgICByZXR1cm4gTG9jYXRpb24KCiAgICBkZWYgd2l0aGRyYXdQb3N0KHNlbGYpOgogICAgICAgIHUgPSBmImh0dHA6Ly97c2VsZi5kb21uYWluSG9zdH0vaGFvYmFvYmFvL2dldHdpdGhkcmF3IgogICAgICAgIHAgPSBmInNpZ25pZD17c2VsZi5yZXF1ZXN0X2lkfSZ1YT0wJnB0eXBlPTAmcGFjY291bnQ9JnBuYW1lPSIKICAgICAgICBpZiBzZWxmLmFsaUFjY291bnQgYW5kIHNlbGYuYWxpTmFtZToKICAgICAgICAgICAgcCA9IGYic2lnbmlkPXtzZWxmLnJlcXVlc3RfaWR9JnVhPTImcHR5cGU9MSZwYWNjb3VudD17cXVvdGUoc2VsZi5hbGlBY2NvdW50KX0mcG5hbWU9e3F1b3RlKHNlbGYuYWxpTmFtZSl9IgogICAgICAgIHIgPSByZXF1ZXN0cy5wb3N0KAogICAgICAgICAgICB1LAogICAgICAgICAgICBoZWFkZXJzPXsKICAgICAgICAgICAgICAgICJBY2NlcHQiOiAiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0LCAqLyo7IHE9MC4wMSIsCiAgICAgICAgICAgICAgICAiQWNjZXB0LUVuY29kaW5nIjogImd6aXAsIGRlZmxhdGUiLAogICAgICAgICAgICAgICAgIkFjY2VwdC1MYW5ndWFnZSI6ICJ6aC1DTix6aDtxPTAuOSIsCiAgICAgICAgICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOCIsCiAgICAgICAgICAgICAgICAiQ29va2llIjogc2VsZi5Db29raWUsCiAgICAgICAgICAgICAgICAiSG9zdCI6IGYie3NlbGYuZG9tbmFpbkhvc3R9IiwKICAgICAgICAgICAgICAgICJPcmlnaW4iOiBmImh0dHA6Ly97c2VsZi5kb21uYWluSG9zdH0iLAogICAgICAgICAgICAgICAgIlByb3h5LUNvbm5lY3Rpb24iOiAia2VlcC1hbGl2ZSIsCiAgICAgICAgICAgICAgICAiUmVmZXJlciI6IGYiaHR0cDovL3tzZWxmLmRvbW5haW5Ib3N0fS9oYW9iYW9iYW8vd2l0aGRyYXciLAogICAgICAgICAgICAgICAgIlgtUmVxdWVzdGVkLVdpdGgiOiAiWE1MSHR0cFJlcXVlc3QiLAogICAgICAgICAgICB9LAogICAgICAgICAgICBkYXRhPXAsCiAgICAgICAgICAgIHZlcmlmeT1GYWxzZSwKICAgICAgICApCiAgICAgICAgcHJpbnQoZiLinIUg6LSm5Y+3W3tzZWxmLm5hbWV9XSDmj5DnjrDnu5PmnpzvvJoiLCByLmpzb24oKVsibXNnIl0pCgogICAgZGVmIHdpdGhkcmF3KHNlbGYpOgogICAgICAgIGdvbGQgPSBpbnQoaW50KHNlbGYucmVtYWluX2dvbGQpIC8gMTAwMCkgKiAxMDAwCiAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1dIOacrOasoeaPkOeOsOmHkeminSAiLCBzZWxmLnJlbWFpbiwgIuWFgyAiLCBnb2xkLCAi6YeR5biBIikKICAgICAgICBpZiBnb2xkIG9yIChzZWxmLnJlbWFpbiA+PSAwLjMpOgogICAgICAgICAgICBpZiBnb2xkOgogICAgICAgICAgICAgICAgIyDlvIDlp4vmj5DnjrAKICAgICAgICAgICAgICAgIHUxID0gZiJodHRwOi8ve3NlbGYuZG9tbmFpbkhvc3R9L2hhb2Jhb2Jhby9nZXRnb2xkIgogICAgICAgICAgICAgICAgcDEgPSBmInJlcXVlc3RfaWQ9e3NlbGYucmVxdWVzdF9pZH0mZ29sZD17Z29sZH0iCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMucG9zdCgKICAgICAgICAgICAgICAgICAgICB1MSwKICAgICAgICAgICAgICAgICAgICBkYXRhPXAxLAogICAgICAgICAgICAgICAgICAgIGhlYWRlcnM9ewogICAgICAgICAgICAgICAgICAgICAgICAiQWNjZXB0IjogImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdCwgKi8qOyBxPTAuMDEiLAogICAgICAgICAgICAgICAgICAgICAgICAiQWNjZXB0LUVuY29kaW5nIjogImd6aXAsIGRlZmxhdGUiLAogICAgICAgICAgICAgICAgICAgICAgICAiQWNjZXB0LUxhbmd1YWdlIjogInpoLUNOLHpoO3E9MC45IiwKICAgICAgICAgICAgICAgICAgICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLTgiLAogICAgICAgICAgICAgICAgICAgICAgICAiQ29va2llIjogc2VsZi5Db29raWUsCiAgICAgICAgICAgICAgICAgICAgICAgICJIb3N0IjogZiJ7c2VsZi5kb21uYWluSG9zdH0iLAogICAgICAgICAgICAgICAgICAgICAgICAiT3JpZ2luIjogZiJodHRwOi8ve3NlbGYuZG9tbmFpbkhvc3R9IiwKICAgICAgICAgICAgICAgICAgICAgICAgIlByb3h5LUNvbm5lY3Rpb24iOiAia2VlcC1hbGl2ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJSZWZlcmVyIjogZiJodHRwOi8ve3NlbGYuZG9tbmFpbkhvc3R9L2hhb2Jhb2Jhby93aXRoZHJhdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJVc2VyLUFnZW50IjogIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMDcuMC4wLjAgU2FmYXJpLzUzNy4zNiBOZXRUeXBlL1dJRkkgTWljcm9NZXNzZW5nZXIvNy4wLjIwLjE3ODEoMHg2NzAwMTQzQikgV2luZG93c1dlY2hhdCgweDYzMDkwNzFkKSBYV0VCLzg0NjEgRmx1ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJYLVJlcXVlc3RlZC1XaXRoIjogIlhNTEh0dHBSZXF1ZXN0IiwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHZlcmlmeT1GYWxzZSwKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICByZXMgPSByLmpzb24oKQogICAgICAgICAgICAgICAgICAgIGlmIHJlcy5nZXQoImVycmNvZGUiKSA9PSAwOgogICAgICAgICAgICAgICAgICAgICAgICB3aXRoZHJhd0JhbGFuY2VOdW0gPSBzZWxmLnJlbWFpbiArIGZsb2F0KHJlc1siZGF0YSJdWyJtb25leSJdKQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYi4pyFIOi0puWPt1t7c2VsZi5uYW1lfV0g6YeR5biB5YWR5o2i5Li6546w6YeR5oiQ5Yqf77yM5byA5aeL5o+Q546w77yM6aKE6K6h5Yiw6LSmIHt3aXRoZHJhd0JhbGFuY2VOdW19IOWFgyA+Pj4gIgogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIHdpdGhkcmF3QmFsYW5jZSA9IHJvdW5kKChpbnQoc2VsZi50eGJ6KSAvIDEwMDApLCAzKQogICAgICAgICAgICAgICAgICAgICAgICBpZiB3aXRoZHJhd0JhbGFuY2VOdW0gPj0gd2l0aGRyYXdCYWxhbmNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d5rKh5pyJ6L6+5Yiw5o+Q546w5qCH5YeGIHt3aXRoZHJhd0JhbGFuY2V9IOWFgyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi53aXRoZHJhd1Bvc3QoKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYi6LSm5Y+3W3tzZWxmLm5hbWV9XSDph5HluIHlhZHmjaLkuLrnjrDph5HlpLHotKXvvJoiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgci50ZXh0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiDmj5DnjrDlnLDlnYDvvJoiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdTEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIOaPkOeOsOWPguaVsO+8miIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMSwKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgICAgICMgcmFpc2UgZQogICAgICAgICAgICAgICAgICAgICMg5aSE55CG5byC5bi4CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1dIOaPkOeOsOWksei0pe+8miIsIGUpCiAgICAgICAgICAgIHNlbGYud2l0aGRyYXdQb3N0KCkKCiAgICBkZWYgaW5pdChzZWxmKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoCiAgICAgICAgICAgICAgICBnZXROZXdJbnZpdGVVcmwoKSwKICAgICAgICAgICAgICAgIGhlYWRlcnM9ewogICAgICAgICAgICAgICAgICAgICJVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzIjogIjEiLAogICAgICAgICAgICAgICAgICAgICJVc2VyLUFnZW50IjogIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMDcuMC4wLjAgU2FmYXJpLzUzNy4zNiBOZXRUeXBlL1dJRkkgTWljcm9NZXNzZW5nZXIvNy4wLjIwLjE3ODEoMHg2NzAwMTQzQikgV2luZG93c1dlY2hhdCgweDYzMDkwNzFkKSBYV0VCLzg0NjEgRmx1ZSIsCiAgICAgICAgICAgICAgICAgICAgIkFjY2VwdCI6ICJ0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjkiLAogICAgICAgICAgICAgICAgICAgICJBY2NlcHQtRW5jb2RpbmciOiAiZ3ppcCwgZGVmbGF0ZSIsCiAgICAgICAgICAgICAgICAgICAgIkFjY2VwdC1MYW5ndWFnZSI6ICJ6aC1DTix6aDtxPTAuOSIsCiAgICAgICAgICAgICAgICAgICAgIkNvb2tpZSI6IHNlbGYuQ29va2llLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHZlcmlmeT1GYWxzZSwKICAgICAgICAgICAgICAgICMg56aB5q2i6YeN5a6a5ZCRCiAgICAgICAgICAgICAgICBhbGxvd19yZWRpcmVjdHM9RmFsc2UsCiAgICAgICAgICAgICkKICAgICAgICAgICAgc2VsZi5kb21uYWluSG9zdCA9IHIuaGVhZGVycy5nZXQoIkxvY2F0aW9uIikuc3BsaXQoIi8iKVsyXQogICAgICAgICAgICAjIHByaW50KHIudGV4dCkKICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d5o+Q5Y+W5Yiw55qE5Z+f5ZCN77yae3NlbGYuZG9tbmFpbkhvc3R9IikKICAgICAgICAgICAgIyBzZWxmLmhlYWRlcnMgPSB7CiAgICAgICAgICAgICMgICAgICJDb25uZWN0aW9uIjogImtlZXAtYWxpdmUiLAogICAgICAgICAgICAjICAgICAiQWNjZXB0IjogImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdCwgKi8qOyBxPTAuMDEiLAogICAgICAgICAgICAjICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTA3LjAuMC4wIFNhZmFyaS81MzcuMzYgTmV0VHlwZS9XSUZJIE1pY3JvTWVzc2VuZ2VyLzcuMC4yMC4xNzgxKDB4NjcwMDE0M0IpIFdpbmRvd3NXZWNoYXQoMHg2MzA5MDYyMSkgWFdFQi84MzUxIEZsdWUiLAogICAgICAgICAgICAjICAgICAiWC1SZXF1ZXN0ZWQtV2l0aCI6ICJYTUxIdHRwUmVxdWVzdCIsCiAgICAgICAgICAgICMgICAgICJSZWZlcmVyIjogZiJodHRwOi8ve3NlbGYuZG9tbmFpbkhvc3R9LyIsCiAgICAgICAgICAgICMgICAgICJPcmlnaW4iOiBmImh0dHA6Ly97c2VsZi5kb21uYWluSG9zdH0iLAogICAgICAgICAgICAjICAgICAjICJIb3N0IjogZiJ7c2VsZi5kb21uYWluSG9zdH0iLAogICAgICAgICAgICAjICAgICAiQWNjZXB0LUVuY29kaW5nIjogImd6aXAsIGRlZmxhdGUiLAogICAgICAgICAgICAjICAgICAiQWNjZXB0LUxhbmd1YWdlIjogInpoLUNOLHpoIiwKICAgICAgICAgICAgIyAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLTgiLAogICAgICAgICAgICAjICAgICAiQ29va2llIjogc2VsZi5Db29raWUsCiAgICAgICAgICAgICMgfQogICAgICAgICAgICAjICMg6I635Y+WcmVxdWVzdElkCiAgICAgICAgICAgICMgc2VsZi5zaWduaWQgPSAiIgogICAgICAgICAgICAjIGZvciBpIGluIHJhbmdlKDMpOgogICAgICAgICAgICAjICAgICByID0gcmVxdWVzdHMuZ2V0KAogICAgICAgICAgICAjICAgICAgICAgZiJodHRwOi8ve3NlbGYuZG9tbmFpbkhvc3R9LyIsCiAgICAgICAgICAgICMgICAgICAgICBoZWFkZXJzPXsKICAgICAgICAgICAgIyAgICAgICAgICAgICAiVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0cyI6ICIxIiwKICAgICAgICAgICAgIyAgICAgICAgICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTA3LjAuMC4wIFNhZmFyaS81MzcuMzYgTmV0VHlwZS9XSUZJIE1pY3JvTWVzc2VuZ2VyLzcuMC4yMC4xNzgxKDB4NjcwMDE0M0IpIFdpbmRvd3NXZWNoYXQoMHg2MzA5MDcxZCkgWFdFQi84NDYxIEZsdWUiLAogICAgICAgICAgICAjICAgICAgICAgICAgICJBY2NlcHQiOiAidGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45IiwKICAgICAgICAgICAgIyAgICAgICAgICAgICAiQWNjZXB0LUVuY29kaW5nIjogImd6aXAsIGRlZmxhdGUiLAogICAgICAgICAgICAjICAgICAgICAgICAgICJBY2NlcHQtTGFuZ3VhZ2UiOiAiemgtQ04semg7cT0wLjkiLAogICAgICAgICAgICAjICAgICAgICAgICAgICJDb29raWUiOiBzZWxmLkNvb2tpZSwKICAgICAgICAgICAgIyAgICAgICAgIH0sCiAgICAgICAgICAgICMgICAgICAgICB2ZXJpZnk9RmFsc2UsCiAgICAgICAgICAgICMgICAgICkKICAgICAgICAgICAgIyAgICAgaHRtbHRleHQgPSByLnRleHQKICAgICAgICAgICAgIyAgICAgaWYgci5oaXN0b3J5OgogICAgICAgICAgICAjICAgICAgICAgZm9yIHJlc3AgaW4gci5oaXN0b3J5OgogICAgICAgICAgICAjICAgICAgICAgICAgIGlmICJvcGVuLndlaXhpbi5xcS5jb20iIGluIHJlc3AuaGVhZGVyc1siTG9jYXRpb24iXToKICAgICAgICAgICAgIyAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICMgICAgICAgICAgICAgICAgICAgICBmIui0puWPt1t7c2VsZi5uYW1lfV0gQ29va2ll5bey6L+H5pyf77yM6K+36YeN6L+b5LiA5LiL572R56uZ77yM5bCx5Lya6Ieq5Yqo5pu05pawQ29va2ll77yI55uu5YmN5LiN56Gu5a6a6L+H5pyf5piv5Zug5Li66Ieq5bex5omL5Yqo6L+b5Y676L+H5LqG6L+Y5piv5LuA5LmI5YW25LuW5Y6f5Zug77yJIgogICAgICAgICAgICAjICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICMgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAjICAgICByZXMxID0gcmUuc3ViKCJccyIsICIiLCBodG1sdGV4dCkKICAgICAgICAgICAgIyAgICAgc2lnbmlkbCA9IHJlLmZpbmRhbGwoJ1wpXHxcfCIoLio/KSI7JywgcmVzMSkKICAgICAgICAgICAgIyAgICAgIyBwcmludChzaWduaWRsLCBodG1sdGV4dCkKICAgICAgICAgICAgIyAgICAgaWYgc2lnbmlkbCA9PSBbXToKICAgICAgICAgICAgIyAgICAgICAgIHRpbWUuc2xlZXAoMSkKICAgICAgICAgICAgIyAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICMgICAgIGVsc2U6CiAgICAgICAgICAgICMgICAgICAgICBzZWxmLnNpZ25pZCA9IHNpZ25pZGxbMF0KICAgICAgICAgICAgIyAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICMgaWYgc2VsZi5zaWduaWQgPT0gIiI6CiAgICAgICAgICAgICMgICAgIHByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeWIneWni+WMliByZXF1ZXN0SWQg5aSx6LSlLOi0puWPt+W8guW4uCIpCiAgICAgICAgICAgICMgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAjICMg6I635Y+W5o+Q546w6aG16Z2i5Zyw5Z2ACiAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoCiAgICAgICAgICAgICAgICBmImh0dHA6Ly97c2VsZi5kb21uYWluSG9zdH0vaGFvYmFvYmFvL3dpdGhkcmF3IiwKICAgICAgICAgICAgICAgIGhlYWRlcnM9ewogICAgICAgICAgICAgICAgICAgICJVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzIjogIjEiLAogICAgICAgICAgICAgICAgICAgICJVc2VyLUFnZW50IjogIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMDcuMC4wLjAgU2FmYXJpLzUzNy4zNiBOZXRUeXBlL1dJRkkgTWljcm9NZXNzZW5nZXIvNy4wLjIwLjE3ODEoMHg2NzAwMTQzQikgV2luZG93c1dlY2hhdCgweDYzMDkwNzFkKSBYV0VCLzg0NjEgRmx1ZSIsCiAgICAgICAgICAgICAgICAgICAgIkFjY2VwdCI6ICJ0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjkiLAogICAgICAgICAgICAgICAgICAgICJBY2NlcHQtRW5jb2RpbmciOiAiZ3ppcCwgZGVmbGF0ZSIsCiAgICAgICAgICAgICAgICAgICAgIkFjY2VwdC1MYW5ndWFnZSI6ICJ6aC1DTix6aDtxPTAuOSIsCiAgICAgICAgICAgICAgICAgICAgIkNvb2tpZSI6IHNlbGYuQ29va2llLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHZlcmlmeT1GYWxzZSwKICAgICAgICAgICAgKQogICAgICAgICAgICBodG1sdGV4dCA9IHIudGV4dAogICAgICAgICAgICBzaWduaWRsID0gcmUuc2VhcmNoKCdyZXF1ZXN0X2lkID0gIiguKj8pIicsIGh0bWx0ZXh0KQogICAgICAgICAgICBpZiBzaWduaWRsID09IFtdOgogICAgICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d5Yid5aeL5YyWIOaPkOeOsOWPguaVsCDlpLHotKUs6LSm5Y+35byC5bi4IikKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5yZXF1ZXN0X2lkID0gc2lnbmlkbFsxXQogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgIyByYWlzZSBlCiAgICAgICAgICAgIHByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeWIneWni+WMluWksei0pSzor7fmo4Dmn6XkvaDnmoRjayIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBydW4oc2VsZik6CiAgICAgICAgaWYgc2VsZi5pbml0KCk6CiAgICAgICAgICAgIHNlbGYudXNlcl9pbmZvKCkKICAgICAgICAgICAgc2VsZi5nb2xkKCkKICAgICAgICAgICAgc2VsZi5yZWFkKCkKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICBzZWxmLmdvbGQoKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHNlbGYud2l0aGRyYXcoKQoKCmRlZiBnZXROZXdJbnZpdGVVcmwoKToKICAgIHIgPSByZXF1ZXN0cy5nZXQoImh0dHBzOi8vY29kZS5zeXdqbWxvdS5jb20uY24vYmFvYmFvY29kZS5waHAiLCB2ZXJpZnk9RmFsc2UpLmpzb24oKQogICAgaWYgci5nZXQoImNvZGUiKSA9PSAwOgogICAgICAgIG5ld0VudHJ5VXJsID0gci5nZXQoImRhdGEiKS5nZXQoImx1b2RpIikKICAgICAgICBwYXJzZWRfdXJsID0gdXJscGFyc2UobmV3RW50cnlVcmwpCiAgICAgICAgaG9zdCA9IHBhcnNlZF91cmwuaG9zdG5hbWUKICAgICAgICByZXR1cm4gZiJodHRwczovL3MxaTYuMW9iZy5zaG9wL2hhb2Jhb2Jhby9hdXRoLzU4NDg3ZjI5MTk4NWM1ZjMyYzE2YjNiMDFiOTZhOTEyIi5yZXBsYWNlKAogICAgICAgICAgICAiczFpNi4xb2JnLnNob3AiLCBob3N0IG9yICJzMWk2LjFvYmcuc2hvcCIKICAgICAgICApCiAgICBlbHNlOgogICAgICAgIHJldHVybiAiaHR0cHM6Ly9zMWk2LjFvYmcuc2hvcC9oYW9iYW9iYW8vYXV0aC81ODQ4N2YyOTE5ODVjNWYzMmMxNmIzYjAxYjk2YTkxMiIKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgIyBhcHBUb2tlbu+8mui/meS4quaYr+Whq3d4cHVzaGVy55qEYXBwVG9rZW4KICAgICMgdG9waWNJZHPvvJrov5nkuKrmmK93eHB1c2hlcueahHRvcGljSWRz5pS55oiQ5L2g6Ieq5bex55qECiAgICAjIOekuuS+izog5bm755SfI29aZEJwMDRwc2dvTjhkTjFFVF91bzgxTlRDMzEjMzAwMCNBVF9VeUlsYmoyMjIybnluRVNiTTJ2SnlBN0RybVVtVVhEIzExNjg2CiAgICBhY2NvdW50cyA9IG9zLmdldGVudigibXlra3lkIikKICAgIGludml0ZVVybCA9IGdldE5ld0ludml0ZVVybCgpCiAgICBpZiBhY2NvdW50cyBpcyBOb25lOgogICAgICAgIHByaW50KGYi5L2g5rKh5pyJ5aGr5YWlbXlra3lk77yM5ZKL6L+Q6KGM77yfXG7otbDkuIvpgoDor7flkZfvvJp7aW52aXRlVXJsfSIpCiAgICBlbHNlOgogICAgICAgICMg6I635Y+W546v5aKD5Y+Y6YeP55qE5YC877yM5bm25oyJ5oyH5a6a5a2X56ym5Liy5YiG5Ymy5oiQ5aSa5Liq6LSm5Y+355qE5Y+C5pWw57uE5ZCICiAgICAgICAgYWNjb3VudHNfbGlzdCA9IG9zLmVudmlyb24uZ2V0KCJteWtreWQiKS5zcGxpdCgiJiIpCgogICAgICAgICMg6L6T5Ye65pyJ5Yeg5Liq6LSm5Y+3CiAgICAgICAgbnVtX29mX2FjY291bnRzID0gbGVuKGFjY291bnRzX2xpc3QpCiAgICAgICAgbW9yZVRpcCA9ICIiCiAgICAgICAgaWYgcmVhZFBvc3REZWxheSA+IDA6CiAgICAgICAgICAgIG1vcmVUaXAgPSBmIuW3suiuvue9rueahOaOqOmAgeaWh+eroOetieW+heeCueWHu+aXtumXtOS4uiB7cmVhZFBvc3REZWxheX3np5IgIgogICAgICAgIHByaW50KAogICAgICAgICAgICBmIuW9k+WJjeiEmuacrOeJiOacrO+8muW5u+eUn+mtlOaUueiHqueUqOeJiCBWMS40NCBcbuW5u+eUn+aPkOekuu+8muiOt+WPluWIsCB7bnVtX29mX2FjY291bnRzfSDkuKrotKblj7cge21vcmVUaXB9XG7ms6jlhozlnLDlnYDvvJp7aW52aXRlVXJsfSIKICAgICAgICApCgogICAgICAgICMg6YGN5Y6G5omA5pyJ6LSm5Y+3CiAgICAgICAgZm9yIGksIGFjY291bnQgaW4gZW51bWVyYXRlKGFjY291bnRzX2xpc3QsIHN0YXJ0PTEpOgogICAgICAgICAgICAjIHByaW50KCJcbiIpCiAgICAgICAgICAgIHByaW50KCItIiAqIDUwKQogICAgICAgICAgICBwcmludChmIui0puWPt1t7YWNjb3VudC5zcGxpdCgnIycpWzBdfV3lvIDlp4vmiafooYzku7vliqEgPj4+IikKICAgICAgICAgICAgIyBwcmludCgiXG4iKQogICAgICAgICAgICAjIOaMiUDnrKblj7fliIblibLlvZPliY3otKblj7fnmoTkuI3lkIzlj4LmlbAKICAgICAgICAgICAgdmFsdWVzID0gYWNjb3VudC5zcGxpdCgiIyIpCiAgICAgICAgICAgICMgcHJpbnQodmFsdWVzKQogICAgICAgICAgICBjZyA9IHt9CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGlmIGxlbih2YWx1ZXMpID09IDI6CiAgICAgICAgICAgICAgICAgICAgY2cgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogdmFsdWVzWzBdLAogICAgICAgICAgICAgICAgICAgICAgICAiQ29va2llIjogdmFsdWVzWzFdLAogICAgICAgICAgICAgICAgICAgICAgICAidHhieiI6IDMwMDAsCiAgICAgICAgICAgICAgICAgICAgICAgICJhbGlBY2NvdW50IjogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhbGlOYW1lIjogIiIsCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBjZyA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiB2YWx1ZXNbMF0sCiAgICAgICAgICAgICAgICAgICAgICAgICJDb29raWUiOiB2YWx1ZXNbMV0sCiAgICAgICAgICAgICAgICAgICAgICAgICJ0eGJ6IjogdmFsdWVzWzJdIG9yIDMwMDAsCiAgICAgICAgICAgICAgICAgICAgICAgICJhbGlBY2NvdW50IjogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhbGlOYW1lIjogIiIsCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICAjIOWkhOeQhuW8guW4uAogICAgICAgICAgICAgICAgcHJpbnQoIuW5u+eUn+mAvOmAvOWPqDoiLCAi6YWN572u55qE5ZWl546p5oSP77yM57y65Y+C5pWw5LqG5oao5om577yM55yL5riF6ISa5pys6K+05piO77yBIikKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIGNnWyJhcHBUb2tlbiJdID0gIiIKICAgICAgICAgICAgY2dbInRvcGljSWRzIl0gPSAiIgogICAgICAgICAgICAjIHByaW50KCLmiYvliqjvvJoiLCBsZW4odmFsdWVzKSwgdmFsdWVzWzRdKQogICAgICAgICAgICBpZiBsZW4odmFsdWVzKSA+PSA0OgogICAgICAgICAgICAgICAgaWYgdmFsdWVzWzNdOgogICAgICAgICAgICAgICAgICAgIGNnWyJhcHBUb2tlbiJdID0gdmFsdWVzWzNdCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBjZ1siYXBwVG9rZW4iXSA9IHd4cHVzaGVyQXBwVG9rZW4KICAgICAgICAgICAgaWYgbGVuKHZhbHVlcykgPj0gNToKICAgICAgICAgICAgICAgIGlmIHZhbHVlc1s0XToKICAgICAgICAgICAgICAgICAgICBjZ1sidG9waWNJZHMiXSA9IHZhbHVlc1s0XQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgY2dbInRvcGljSWRzIl0gPSB3eHB1c2hlclRvcGljSWQKICAgICAgICAgICAgaWYgbGVuKHZhbHVlcykgPj0gNjoKICAgICAgICAgICAgICAgIGlmIHZhbHVlc1s1XToKICAgICAgICAgICAgICAgICAgICBjZ1siYWxpTmFtZSJdID0gdmFsdWVzWzVdCiAgICAgICAgICAgIGlmIGxlbih2YWx1ZXMpID49IDc6CiAgICAgICAgICAgICAgICBpZiB2YWx1ZXNbNl06CiAgICAgICAgICAgICAgICAgICAgY2dbImFsaUFjY291bnQiXSA9IHZhbHVlc1s2XQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBpZiB3ZWNoYXRCdXNzaW5lc3NLZXkgPT0gIiI6CiAgICAgICAgICAgICAgICAgICAgaWYgY2dbImFwcFRva2VuIl0uc3RhcnRzd2l0aCgiQVRfIikgPT0gRmFsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYi5bm755Sf5o+Q56S677yM6LSm5Y+3W3thY2NvdW50LnNwbGl0KCcjJylbMF19XSB3eHB1c2gg6YWN572u6ZSZ6K+v77yM5b+r5LuU57uG55yL5aS06YOo6K+05piO77yBIikKICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICBpZiAoY2dbImFwcFRva2VuIl0uc3RhcnRzd2l0aCgiQVRfIikgPT0gRmFsc2UpIG9yICgKICAgICAgICAgICAgICAgICAgICAgICAgY2dbInRvcGljSWRzIl0uaXNkaWdpdCgpID09IEZhbHNlCiAgICAgICAgICAgICAgICAgICAgKToKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiLlubvnlJ/mj5DnpLrvvIzotKblj7dbe2FjY291bnQuc3BsaXQoJyMnKVswXX1dIHd4cHVzaCDphY3nva7plJnor6/vvIzlv6vku5Tnu4bnnIvlpLTpg6jor7TmmI7vvIEiKQogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgYXBpID0gSEhZRChjZykKICAgICAgICAgICAgICAgIGlmIGNnWyJhbGlOYW1lIl0gYW5kIGNnWyJhbGlBY2NvdW50Il06CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIGYi5bm755Sf5o+Q56S677yM6LSm5Y+3W3thY2NvdW50LnNwbGl0KCcjJylbMF19XSDph4fnlKjkuoYg5pSv5LuY5a6d5o+Q546w77yM5aeT5ZCN77yae2NnWydhbGlOYW1lJ11977yM6LSm5oi377yae2NnWydhbGlBY2NvdW50J119IgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiLlubvnlJ/mj5DnpLrvvIzotKblj7dbe2FjY291bnQuc3BsaXQoJyMnKVswXX1dIOmHh+eUqOS6hiDlvq7kv6Hmj5DnjrAiKQogICAgICAgICAgICAgICAgYXBpLnJ1bigpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgIGYi5bm755Sf5o+Q56S677yM6LSm5Y+3W3thY2NvdW50LnNwbGl0KCcjJylbMF19XSDlh7rplJnllabvvIzkuZ/orrjmmK/lubPlj7DmjqXlj6Ppl67popjvvIzlj6/ku6Xov4fkuIDkvJrlsJ3or5Xph43mlrDov5DooYzvvIzlpoLmnpzov5jmmK/kuI3ooYzvvIzor7flsIbkuIvpnaLmiqXplJnmiKrlm77lj5HliLB0Z+S6pOa1gee+pDoiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICByYWlzZSBlCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAjIHByaW50KCJcbiIpCiAgICAgICAgICAgIHByaW50KCItIiAqIDUwKQogICAgICAgICAgICBwcmludChmIui0puWPt1t7YWNjb3VudC5zcGxpdCgnIycpWzBdfV3miafooYzku7vliqHlrozmr5XvvIEiKQogICAgICAgICAgICAjIHByaW50KCJcbiIpCg=='))
except Exception as e:
    print('脚本执行出错:', str(e))
